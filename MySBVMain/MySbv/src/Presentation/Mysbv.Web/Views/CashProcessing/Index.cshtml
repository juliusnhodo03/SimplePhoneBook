@using System.Web.Optimization
@model Application.Dto.CashProcessing.CashProccessingModel

@{
    ViewBag.Title = "Process Cash Deposit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .k-link {
        min-width: 25px !important;
    }

    .k-window-action {
        visibility: hidden;
    }

    .container {
        width: 98% !important;
    }

    input[type=text] {
        width: 200px;
    }

    .required-items {
        color: #000;
        font-weight: normal;
    }

    .slider {
        cursor: pointer;
        cursor: hand;
    }

    .drop-slider {
        cursor: pointer;
        cursor: hand;
    }
</style>

<link href="~/Content/KendoUI/kendo.default.min.css" rel="stylesheet" />
<link href="~/Content/KendoUI/kendo.common.min.css" rel="stylesheet" />
<script src="~/Scripts/KendoUI/kendo.aspnetmvc.min.js"></script>
<script src="~/Scripts/KendoUI/kendo.web.min.js"></script>

<div class="well">
    <div class="ui-widget-header">
        <h4 style="margin-left: 5px">@ViewBag.HeaderText</h4>
    </div>
    <div class="ui-widget-content" style="padding: 5px;">
        @if (!ViewBag.IsLoaded)
        {
            if (Model.UserTypeId != null)
            {
                using (Html.BeginForm())
                {
                    @Html.ValidationSummary(true)

                    <div class="containerOrBag" id="SealSerialNumber">
                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    @Html.LabelFor(a => a.CashProcessing.SealSerialNumber, new { @class = "add-on required" })
                                </div>
                                <div class="span3">
                                    @Html.TextBoxFor(a => a.CashProcessing.SealSerialNumber, new { @class = "tbstyle", @maxlength = "14", @style = "margin-left:-30px" })
                                    @Html.ValidationMessageFor(a => a.CashProcessing.SealSerialNumber)
                                </div>
                                <div class="span2">
                                    <input type="submit" value="Submit" class="btn" style="width: 100px; margin-left: -20px" />
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <h4 style="color: red">
                    The current logged in user has no profile. Make sure you are not making use of SBVAdmin Account when working on MySBV.
                    This Account is only there for the development team. Thank you.
                </h4>
            }
        }
        else
        {
            using (Html.BeginForm("Process", "CashProcessing", FormMethod.Post, new {id = "processForm"}))
            {
                @Html.ValidationSummary()
                @Html.HiddenFor(a => a.IsVaultDeposit, new { id = "hdIsVaultDeposit" })

                if (Model.CashProcessing != null)
                {
                    var depositType = Model.CashProcessing.DepositTypeName.Contains("Drop") ? "Drop" : "Deposit";

                    <h4 style="margin-left: 20px">Cash Deposit Information</h4>

                    @Html.HiddenFor(a => a.CashProcessing.CashDepositId, new {id = "hdCashDepositId"})
                    @Html.HiddenFor(a => a.CashProcessing.DepositTypeId, new {id = "hdDepositTypeId"})
                    @Html.HiddenFor(a => a.CashProcessing.SiteId, new {id = "hdSiteId"})
                    @Html.HiddenFor(a => a.CashProcessing.DeviceId, new {id = "hdDeviceId"})
                    @Html.HiddenFor(a => a.CashProcessing.ProductTypeId, new {id = "hdProductTypeId"})
                    @Html.HiddenFor(a => a.CashProcessing.CreateDate, new {@class = "CreateDate"})
                    @Html.HiddenFor(a => a.CashProcessing.CreatedById, new {@class = "CreatedById"})
                    @Html.HiddenFor(a => a.CashProcessing.SubmitDateTime, new {@class = "SubmitDateTime"})
                    @Html.HiddenFor(a => a.CashProcessing.Narrative)
                    @Html.HiddenFor(a => a.CashProcessing.AccountId, new {id = "hdAccountId"})

                    @Html.HiddenFor(a => a.CashProcessing.SendDateTime, new {@class = "hdSendDateTime"})
                    @Html.HiddenFor(a => a.CashProcessing.CitDateTime, new {@class = "hdCitDateTime"})
                    @Html.HiddenFor(a => a.CashProcessing.VaultAmount, new {@class = "hdVaultAmt"})
                    @Html.HiddenFor(a => a.CashProcessing.VaultSource, new {@class = "hdVaultSrc"})
                    @Html.HiddenFor(a => a.CashProcessing.SettlementIdentifier, new {@class = "hdSettIdentifier"})
                    @Html.HiddenFor(a => a.CashProcessing.iTramsUserName, new {@class = "hdiTramsUserName"})
                    @Html.HiddenFor(a => a.CashProcessing.Confirm, new {@class = "hdConfirm"})

                    <div class="containerholder">

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    @Html.LabelFor(model => model.CashProcessing.DepositTypeName, new {@class = "add-on", @style = "width: 150px"})
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.CashProcessing.DepositTypeName, new {@readonly = "readonly"})
                                </div>

                                <div class="span3 offset1">
                                    @Html.LabelFor(model => model.CashProcessing.ProductType, new {@class = "add-on", @style = "width: 250px"})
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.CashProcessing.ProductType, new {@readonly = "readonly"})
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    @Html.LabelFor(model => model.CashProcessing.MerchantName, new {@class = "add-on", @style = "width: 150px"})
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.CashProcessing.MerchantName, new {@readonly = "readonly"})
                                </div>
                                <div class="span3 offset1">
                                    @Html.LabelFor(model => model.CashProcessing.ContractNumber, new {@class = "add-on", @style = "width: 250px"})
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.CashProcessing.ContractNumber, new {@readonly = "readonly"})
                                </div>
                            </div>
                        </div>

                        @if (Model.CashProcessing.DepositTypeName != "Multi Deposit")
                        {
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        @Html.LabelFor(model => model.CashProcessing.TransactionReference, new {@class = "add-on", @style = "width: 150px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.TransactionReference, new {id = "TransactionReference", @readonly = "readonly"})
                                    </div>
                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CashProcessing.Narrative, new {@class = "add-on", @style = "width: 250px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.Narrative, new {id = "Narrative", @readonly = "readonly"})
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        @Html.LabelFor(model => model.CashProcessing.DepositedAmount, new {@class = "add-on", @style = "width: 150px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.DepositedAmount, new {id = "DepositedAmount", @readonly = "readonly"})
                                    </div>
                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CashProcessing.ActualAmount, new {@class = "add-on", @style = "width: 250px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.ActualAmount, new {@class = "ActualAmount", @readonly = "readonly", id = "orgtotaldepo", @maxlength = "10"})
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        <label style="width: 150px"></label>
                                    </div>
                                    <div class="span2">

                                    </div>
                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CashProcessing.DiscrepancyAmount, new {@class = "add-on", @style = "width: 250px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.DiscrepancyAmount, new {@class = "DiscrepancyAmount", @readonly = "readonly", id = "totaldepo", @hidden = "hidden", @maxlength = "10"})
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        @Html.LabelFor(model => model.CashProcessing.TransactionReference, new {@class = "add-on", @style = "width: 150px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.TransactionReference, new {id = "TransactionReference", @readonly = "readonly"})
                                    </div>
                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CashProcessing.ActualAmount, new {@class = "add-on", @style = "width: 250px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.ActualAmount, new {@class = "ActualAmount", @readonly = "readonly", id = "orgtotaldepo", @maxlength = "10"})
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        @Html.LabelFor(model => model.CashProcessing.DepositedAmount, new {@class = "add-on", @style = "width: 150px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.DepositedAmount, new {id = "DepositedAmount", @readonly = "readonly"})
                                    </div>
                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CashProcessing.DiscrepancyAmount, new {@class = "add-on", @style = "width: 250px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CashProcessing.DiscrepancyAmount, new {@class = "DiscrepancyAmount", @readonly = "readonly", id = "totaldepo", @hidden = "hidden", @maxlength = "10"})
                                    </div>
                                </div>
                            </div>
                        }

                        <h4>Container Information</h4>

                        @for (int i = 0; i < Model.CashProcessing.Containers.Count; i++)
                        {
                            string value = string.IsNullOrEmpty(Model.CashProcessing.Containers[i].SerialNumber) ? Model.CashProcessing.Containers[i].SealNumber : Model.CashProcessing.Containers[i].SerialNumber;

                            <div class="container">
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerId, new {id = "ContainerId"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].CashDepositId)
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerTypeId, new {id = "ContainerTypeId"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].SerialNumber, new {id = "SerialNumber"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].SealNumber, new {id = "SealNumber"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].ReferenceNumber, new {id = "ReferenceNumber"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].IsPrimaryContainer, new {id = "IsPrimaryContainer"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].Amount, new {id = "Amount"})
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].CreateDate)
                                @Html.HiddenFor(a => a.CashProcessing.Containers[i].CreatedById)

                                <div class="container-area">
                                    <div class="not-processed container-header">
                                        <p><a href="#" style="margin-left: 5px; min-height: 30px;" class="slider">@Html.Raw(value)</a></p>
                                    </div>
                                    <div>
                                        <div class="expand-one">

                                            <div class="row">
                                                <div class="input-prepend">
                                                    <div class="span2">
                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerTypeName, new {@class = "add-on", @style = "width: 150px"})
                                                    </div>
                                                    <div class="span2">
                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerTypeName, new {@readonly = "readonly"})
                                                    </div>

                                                    <div class="span2 offset2">
                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].SerialNumber, new {@class = "add-on", @style = "width: 150px"})
                                                    </div>
                                                    <div class="span2">
                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].SerialNumber, new {@readonly = "readonly"})
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="input-prepend">
                                                    <div class="span2">
                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].Amount, new {@class = "add-on", @style = "width: 150px"})
                                                    </div>
                                                    <div class="span2">
                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].Amount, new {@readonly = "readonly", id = "totalContainerAmount", @maxlength = "10"})
                                                    </div>
                                                    <div class="span2 offset2">
                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].DiscrepancyAmount, new {@class = "add-on", @style = "width: 150px"})
                                                    </div>
                                                    <div class="span2">
                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].DiscrepancyAmount, new {@class = "ContainerDescrepancyAmount", @readonly = "readonly", @maxlength = "10"})
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="row">
                                                <div class="input-prepend">
                                                    <div class="span2 offset6">
                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].ActualAmount, new {@class = "add-on", @style = "width: 150px"})
                                                    </div>
                                                    <div class="span2">
                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ActualAmount, new {@class = "ContainerActualAmount", @readonly = "readonly", @maxlength = "10"})
                                                    </div>
                                                </div>
                                            </div>


                                            @if (Model.CashProcessing.Containers[i].ContainerDrops.Count > 0)
                                            {

                                                for (int j = 0; j < Model.CashProcessing.Containers[i].ContainerDrops.Count; j++)
                                                {
                                                    <div class="containerDrop">
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropId, new {id = "ContainerDropId"})
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerId)
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Number, new {id = "Number"})
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].BagSerialNumber, new {id = "BagSerialNumber"})
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].CreateDate)
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].CreatedById)
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Narrative, new {id = "Narrative"})
                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ReferenceNumber, new {id = "ReferenceNumber"})

                                                        <div class="drop-area">
                                                            <div style="margin-left: 10px; margin-top: 5px" class="drop_items">
                                                                <div class="not-processed" id="subContainerHeader">
                                                                    <p><a href="#" class="subContainerlink drop-slider" style="margin-left: 5px">Process</a></p>
                                                                </div>
                                                                <div class="expand-one">
                                                                    <div>
                                                                        <div class="row">
                                                                            <div class="input-prepend" style="margin-top: 5px">
                                                                                <div class="span2">
                                                                                    @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Amount, new {@class = "add-on", @style = "width: 158px"})
                                                                                </div>
                                                                                <div class="span2">
                                                                                    @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Amount, new {@class = "dropAmount", @readonly = "readonly", @style = "width:158px; margin-left:15px"})
                                                                                </div>

                                                                                <div class="input-prepend">
                                                                                    <div class="span2 offset2">
                                                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ActualAmount, new {@class = "add-on", @style = "width: 155px; margin-left: -20px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ActualAmount, new {@class = "DropActualTotal", @readonly = "readonly", @style = "margin-left:-5px; width:158px; ", @maxlength = "10"})
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        <div class="row">
                                                                            @if (Model.CashProcessing.DepositTypeName == "Multi Deposit")
                                                                            {
                                                                                <div class="input-prepend" style="margin-top: 5px">
                                                                                    <div class="span2">
                                                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Narrative, new {@class = "add-on", @style = "width: 158px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Narrative, new {id = "Narrative", @readonly = "readonly", @style = "width:158px; margin-left:15px"})
                                                                                    </div>
                                                                                </div>
                                                                            }
                                                                            @if (Model.CashProcessing.DepositTypeName == "Multi Drop")
                                                                            {
                                                                                <div class="input-prepend" style="margin-top: 5px">
                                                                                    <div class="span2">
                                                                                        @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].BagSerialNumber, new {@class = "add-on", @style = "width: 158px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].BagSerialNumber, new {id = "Narrative", @readonly = "readonly", @style = "width:158px; margin-left:15px"})
                                                                                    </div>
                                                                                </div>
                                                                            }
                                                                            else
                                                                            {
                                                                                <div class="input-prepend" style="margin-top: 5px">
                                                                                    <div class="span2">
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                    </div>
                                                                                </div>
                                                                            }
                                                                            <div class="input-prepend">
                                                                                <div class="span2 offset2">
                                                                                    @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].DiscrepancyAmount, new {@class = "add-on", @style = "width: 155px; margin-left: -20px"})
                                                                                </div>
                                                                                <div class="span2">
                                                                                    @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].DiscrepancyAmount, new {@class = "discrepancyDropTotal", @readonly = "readonly", @style = "margin-left:-5px; width:158px; ", @maxlength = "10"})
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                        <br />
																	
																	


                                                                        <div class="row">
                                                                            <div class="label" style="width: 335px; margin-left: 20px;">
                                                                                <div class="span4">
                                                                                    <h5 style="margin-top: -2px">Cash Deposit values advised by the client</h5>
                                                                                </div>
                                                                            </div>
                                                                            <div class="label" style="width: 90px;">
                                                                                <div class="span1">
                                                                                    <h5 style="margin-top: -2px;">Notes</h5>
                                                                                </div>
                                                                            </div>
                                                                            <div class="label" style="width: 333px; margin-left: 3px;">
                                                                                <div class="span2">
                                                                                    <h5 style="margin-top: -2px">Cash Deposit values verified by SBV</h5>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        <div class="row">
                                                                            <div class="label" style="margin-left: 20px;">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label" style="width: 90px;">
                                                                                <div class="span1" style="margin-left: -1px">
                                                                                    <h6 style="margin-top: -2px;">Denomination</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        @{
                                                                            var visiblityText = "hidden";

                                                                            var hasNotes = Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems.Where(e => e.DenominationType == "Notes").Any();

                                                                            if (hasNotes == false)
                                                                            {
                                                                                <div class="row all_notes">
                                                                                    @Html.Hidden("ContainerDropItemId", 0, new {id = "ContainerDropItemId"})
                                                                                    @Html.Hidden("DenominationId", 0, new {id = "DenominationId"})
                                                                                    @Html.Hidden("DenominationType", "Notes", new {id = "DenominationType"})

                                                                                    <div class="span2">
                                                                                        @Html.TextBox("TextCount", "", new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.TextBox("TextValue", "", new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList,
                                                                                            new {@class = "ValueInCents lock", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px"})
                                                                                    </div>
                                                                                    <div>
                                                                                        @Html.TextBox("DiscrepancyValue", "", new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                                    </div>
                                                                                    <div>
                                                                                        @Html.TextBox("DiscrepancyCount", "", new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                                    </div>
                                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                                        <a class="buttonAddNotes"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                                    </div>
                                                                                </div>
                                                                            }

                                                                            for (int x = 0; x < Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems.Count; x++)
                                                                            {
                                                                                if (Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationType == "Notes")
                                                                                {
                                                                                    var dropDownNote = Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ValueInCents.ToString();

                                                                                    <div class="row all_notes">
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ContainerDropItemId, new {id = "ContainerDropItemId"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationId, new {id = "DenominationId"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationType, new {id = "DenominationType"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].CreateDate)

                                                                                        <div class="span2">
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].Count,
                                                                                                new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px; "})
                                                                                        </div>
                                                                                        <div class="span2">
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].Value,
                                                                                                new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                                        </div>
                                                                                        <div class="span2">
                                                                                            @Html.DropDownListFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ValueInCents, ViewData[dropDownNote] as SelectList,
                                                                                                new {@class = "ValueInCents", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px"})
                                                                                        </div>
                                                                                        <div>
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DiscrepancyValue,
                                                                                                new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                                        </div>
                                                                                        <div>
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DiscrepancyCount,
                                                                                                new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px;"})
                                                                                        </div>
                                                                                        <div id="all-buttons" class="all-buttons hide">
                                                                                            <a class="buttonAddNotes"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                                            <a class="buttonRemoveNotes" style="visibility: @visiblityText"><img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" /></a>
                                                                                        </div>
                                                                                    </div>

                                                                                    visiblityText = "visible";
                                                                                }
                                                                            }
                                                                        }

                                                                    </div>
                                                                    <br />
																
																

                                                                    <div>

                                                                        <div class="row">
                                                                            <div class="label" style="width: 335px; margin-left: 20px;">
                                                                                <div class="span4">
                                                                                    <h5 style="margin-top: -2px">Cash Deposit values advised by the client</h5>
                                                                                </div>
                                                                            </div>
                                                                            <div class="label" style="width: 90px;">
                                                                                <div class="span1">
                                                                                    <h5 style="margin-top: -2px;">Coins</h5>
                                                                                </div>
                                                                            </div>
                                                                            <div class="label" style="width: 333px; margin-left: 3px;">
                                                                                <div class="span2">
                                                                                    <h5 style="margin-top: -2px">Cash Deposit values verified by SBV</h5>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        <div class="row">

                                                                            <div class="label" style="margin-left: 20px;">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label" style="width: 90px;">
                                                                                <div class="span1" style="margin-left: -1px">
                                                                                    <h6 style="margin-top: -2px;">Denomination</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                                </div>
                                                                            </div>

                                                                            <div class="label">
                                                                                <div class="span2">
                                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                                </div>
                                                                            </div>
                                                                        </div>

                                                                        @{
                                                                            var coinVvisiblityText = "hidden";

                                                                            var hasCoins = Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems.Where(e => e.DenominationType == "Coins").Any();

                                                                            if (hasCoins == false)
                                                                            {
                                                                                <div class="row all_coins">
                                                                                    @Html.Hidden("ContainerDropItemId", 0, new {id = "ContainerDropItemId"})
                                                                                    @Html.Hidden("DenominationId", 0, new {id = "DenominationId"})
                                                                                    @Html.Hidden("DenominationType", "Coins", new {id = "DenominationType"})

                                                                                    <div class="span2">
                                                                                        @Html.TextBox("TextCount", "", new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.TextBox("TextValue", "", new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                                    </div>
                                                                                    <div class="span2">
                                                                                        @Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList,
                                                                                            new {@class = "ValueInCents lock", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px"})
                                                                                    </div>
                                                                                    <div>
                                                                                        @Html.TextBox("DiscrepancyValue", "", new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                                    </div>
                                                                                    <div>
                                                                                        @Html.TextBox("DiscrepancyCount", "", new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                                    </div>
                                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                                        <a class="buttonAddCoins"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                                    </div>
                                                                                </div>
                                                                            }

                                                                            for (int x = 0; x < Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems.Count; x++)
                                                                            {
                                                                                if (Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationType == "Coins")
                                                                                {
                                                                                    var dropDownCoin = Model.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ValueInCents.ToString();

                                                                                    <div class="row all_coins">
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ContainerDropItemId, new {id = "ContainerDropItemId"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationId, new {id = "DenominationId"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DenominationType, new {id = "DenominationType"})
                                                                                        @Html.HiddenFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].CreateDate)

                                                                                        <div class="span2">
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].Count,
                                                                                                new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px; "})
                                                                                        </div>
                                                                                        <div class="span2">
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].Value,
                                                                                                new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                                        </div>
                                                                                        <div class="span2">
                                                                                            @Html.DropDownListFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].ValueInCents, ViewData[dropDownCoin] as SelectList,
                                                                                                new {@class = "ValueInCents", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px"})
                                                                                        </div>
                                                                                        <div>
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DiscrepancyValue,
                                                                                                new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                                        </div>
                                                                                        <div>
                                                                                            @Html.TextBoxFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].ContainerDropItems[x].DiscrepancyCount,
                                                                                                new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px;"})
                                                                                        </div>
                                                                                        <div id="all-buttons" class="all-buttons hide">
                                                                                            <a class="buttonAddCoins"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                                            <a class="buttonRemoveCoins" style="visibility: @coinVvisiblityText"><img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" /></a>
                                                                                        </div>
                                                                                    </div>

                                                                                    coinVvisiblityText = "visible";
                                                                                }
                                                                            }
                                                                        }

                                                                    </div>

                                                                    <div class="devideHor"></div>

                                                                    <div class="row reasons">
                                                                        <div class="span2">
                                                                            @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].DiscrepancyReasonId, new {@class = "label required", @style = "margin-left:5px; width:155px"})
                                                                        </div>
                                                                        <div class="span2">
                                                                            @Html.DropDownListFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].DiscrepancyReasonId, ViewData["Reasons"] as SelectList,
                                                                                new {@class = "DiscrepancyReasonId", @disabled = "disabled", @required = "required", @style = "width:173px; margin-left:15px"})

                                                                            @Html.ValidationMessageFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].DiscrepancyReasonId)
                                                                        </div>

                                                                        <div class="span2 offset1">
                                                                            @Html.LabelFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Comment, new {@class = "label required", @style = "margin-left:58px; width:155px"})
                                                                        </div>
                                                                        <div class="span3">
                                                                            @Html.TextAreaFor(a => a.CashProcessing.Containers[i].ContainerDrops[j].Comment, new {@class = "reasonComment", @readonly = "readonly", @style = "width:165px; margin-left:75px; margin-bottom: 8px; min-height:50px; max-height:70px;"})
                                                                        </div>
                                                                    </div>

                                                                    <div>
                                                                        <div class="row">
                                                                            <div class="span2">
                                                                                @Html.Label("LabelConfirm", "Confirm", new {@class = "label required", @style = "width:160px;"})
                                                                            </div>
                                                                            <div class="span2">
                                                                                @Html.CheckBox("checkConfirm", false, new {@class = "checkConfirm", @required = "required", @style = "margin-left:15px; margin-top:5px"})
                                                                            </div>

                                                                            <div class="span2 offset1">
                                                                                @Html.Label("labelDiscrepancy", "Discrepancy", new {@class = "label required", style = "width:158px;margin-left:58px;"})
                                                                            </div>
                                                                            <div class="span1">
                                                                                @Html.CheckBox("checkDiscrepancy", false, new {@class = "checkDiscrepancy", @style = "margin-left:75px;"})
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            }

                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        @Html.HiddenFor(a => a.CashProcessing.SupervisorId, new {id = "verifiedBy"})
                        @Html.HiddenFor(a => a.CashProcessing.IsDescripency, new {id = "desc"})
                        @Html.HiddenFor(a => a.CashProcessing.CreateDate)
                        @Html.HiddenFor(a => a.CashProcessing.CreatedById)

                        <!-- Buttons -->
                        <div class="row pull-right">
                            <div id="release" class="span2">
                            </div>
                            <div id="sRelease" class="span2">
                                <input id="btnSubmit" type="button" style="width: 140px" value="Release" class="btn btn-success" />
                                <input type="button" id="btnSupervisorSubmit" style="width: 140px" value="Supervisor Release" class="btn btn-primary hide" />
                            </div>
                            <div class="span2">
                                <button onclick=" exitProcessing() " class="btn btn-mini btn-danger" style="width: 100px !important; margin-left: 30px; font-weight: bold" type="button">Cancel</button>
                            </div>
                        </div>
                        <br />

                    </div>
                }
                else
                {
                    // Vault deposit processing
                    //====================================================== 
                    
                    @Html.HiddenFor(a => a.VaultProcessing.CashDepositId, new {id = "hdvCashDepositId"})
                    @Html.HiddenFor(a => a.VaultProcessing.SiteId, new { id = "hdvSiteId" })
            
                    @Html.HiddenFor(a => a.VaultProcessing.CitCode, new { id = "hdvCitCode" }) 
                    @Html.HiddenFor(a => a.VaultProcessing.DeviceId, new { id = "hdvDeviceId" })
                    @Html.HiddenFor(a => a.VaultProcessing.ProductTypeId, new { id = "hdvProductTypeId" })
                    @Html.HiddenFor(a => a.VaultProcessing.SerialNumber, new { id = "hdvSerialNumber" })
                    @Html.HiddenFor(a => a.VaultProcessing.ContainerId, new { id = "hdvContainerId" })
                    @Html.HiddenFor(a => a.VaultProcessing.VaultContainerId, new { id = "hdvVaultContainerId" })
            
                    <div class="containerholder">

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    <label class="add-on" style="width: 150px">Cit Code</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.CitCode, new { @readonly = "readonly", id = "hdvCitCode" })
                                </div>

                                <div class="span3 offset1">
                                    <label class="add-on" style="width: 250px">Product Type</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.ProductTypeName, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    <label class="add-on" style="width: 150px">Merchant Name</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.MerchantName, new { @readonly = "readonly" })
                                </div>
                                <div class="span3 offset1">
                                    <label class="add-on" style="width: 250px">Contract Number</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.ContractNumber, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    <label class="add-on" style="width: 150px">Transaction Number</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.TransactionNumber, new { @readonly = "readonly" })
                                </div>

                                <div class="span3 offset1">
                                    <label class="add-on" style="width: 250px">Deposit Reference</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.DepositReference, new { @readonly = "readonly" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    <label class="add-on" style="width: 150px">Device Name</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.DeviceName, new { @readonly = "readonly" })
                                </div>

                                <div class="span3 offset1">
                                    <label class="add-on" style="width: 250px">Discrepancy Amount</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.DiscrepancyAmount, new { @readonly = "readonly", @class = "cDiscrepancyAmount" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="input-prepend">
                                <div class="span2">
                                    <label class="add-on" style="width: 150px">Total Deposit Amount</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.Amount, new { @readonly = "readonly", @class="cDepositAmount" })
                                </div>

                                <div class="span3 offset1">
                                    <label class="add-on" style="width: 250px">Total Deposit Amount (Actual)</label>
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.VaultProcessing.ActualAmount, new { @readonly = "readonly", @class = "cActualAmount" })
                                </div>
                            </div>
                        </div>
                        
                        
                        <h4>Container Information</h4>

                        <div class="container">

                            <div class="container-area">
                                <div class="not-processed container-header">
                                    <p><a href="#" style="margin-left: 5px; min-height: 30px;" class="slider">@Model.VaultProcessing.SerialNumber</a></p>
                                </div>
                                <div>
                                    <div class="expand-one">

                                        <div class="row">
                                            <div class="input-prepend">
                                                <div class="span2">
                                                    <label class="add-on" style="width: 150px">Serial Number</label>
                                                </div>
                                                <div class="span2">
                                                    @Html.TextBoxFor(a => a.VaultProcessing.SerialNumber, new { @readonly = "readonly" })
                                                </div>

                                                <div class="span2 offset2">
                                                </div>
                                                <div class="span2">
                                                </div>
                                            </div>
                                        </div>
                                        <br />

                                        <!--Container Drop Information-->
                                        <div class="containerDrop">

                                            <div class="drop_area">
                                                <div class="drop_items">
                                                    <div class="not-processed hide" id="subContainerHeader">
                                                        <p><a href="#" class="subContainerlink drop-slider" style="margin-left: 5px">Process</a></p>
                                                    </div>
                                                    <!--Notes-->
                                                    <div>
                                                        <div class="row">
                                                            <div class="label" style="width: 335px; margin-left: 20px;">
                                                                <div class="span4">
                                                                    <h5 style="margin-top: -2px">Cash Deposit values advised by the Vault</h5>
                                                                </div>
                                                            </div>
                                                            <div class="label" style="width: 90px;">
                                                                <div class="span1">
                                                                    <h5 style="margin-top: -2px;">Notes</h5>
                                                                </div>
                                                            </div>
                                                            <div class="label" style="width: 333px; margin-left: 3px;">
                                                                <div class="span2">
                                                                    <h5 style="margin-top: -2px">Cash Deposit values verified by SBV</h5>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="row">
                                                            <div class="label" style="margin-left: 20px;">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label" style="width: 90px;">
                                                                <div class="span1" style="margin-left: -1px">
                                                                    <h6 style="margin-top: -2px;">Denomination</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        @{
                                                            var notes = Model.VaultProcessing.VaultContainerDrops.Where(e => e.DenominationType == "NOTES");

                                                            var hasNotes = Model.VaultProcessing.VaultContainerDrops.Any(e => e.DenominationType == "NOTES");

                                                            if (hasNotes == false)
                                                            {
                                                                <div class="row all_notes">
                                                                    @Html.Hidden("ContainerDropItemId", 0, new {id = "ContainerDropItemId"})
                                                                    @Html.Hidden("DenominationId", 0, new {id = "DenominationId"})
                                                                    @Html.Hidden("DenominationType", "Notes", new {id = "DenominationType"})

                                                                    <div class="span2">
                                                                        @Html.TextBox("TextCount", "", new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.TextBox("TextValue", "", new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList,
                                                                            new { @class = "ValueInCents lock", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px" })
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyValue", "", new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyCount", "", new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                        <a class="buttonAddNotes"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                    </div>
                                                                </div>
                                                            }

                                                            foreach (var item in notes)
                                                            {
                                                                var dropDownNote = item.ValueInCents.ToString();

                                                                <div class="row all_notes">
                                                                    @Html.HiddenFor(a => item.DenominationId, new { id = "DenominationId" })
                                                                    @Html.HiddenFor(a => item.DenominationType, new { id = "DenominationType" })

                                                                    <div class="span2">
                                                                        @Html.TextBox("TextCount", item.Count, new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.TextBox("TextValue", item.Value, new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.DropDownListFor(a => item.ValueInCents, ViewData[dropDownNote] as SelectList,
                                                                            new
                                                                            {
                                                                                @class = "ValueInCents", 
                                                                                @disabled = "disabled", 
                                                                                @maxlength = "10", 
                                                                                @style = "width:104px; margin-left:30px"
                                                                            })
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyValue", item.DiscrepancyValue, new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyCount", item.DiscrepancyCount, new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                        <a class="buttonAddNotes"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>

                                                    <br />

                                                    <!--Coins-->
                                                    <div>
                                                        <div class="row">
                                                            <div class="label" style="width: 335px; margin-left: 20px;">
                                                                <div class="span4">
                                                                    <h5 style="margin-top: -2px">Cash Deposit values advised by the Vault</h5>
                                                                </div>
                                                            </div>
                                                            <div class="label" style="width: 90px;">
                                                                <div class="span1">
                                                                    <h5 style="margin-top: -2px;">Coins</h5>
                                                                </div>
                                                            </div>
                                                            <div class="label" style="width: 333px; margin-left: 3px;">
                                                                <div class="span2">
                                                                    <h5 style="margin-top: -2px">Cash Deposit values verified by SBV</h5>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="row">
                                                            <div class="label" style="margin-left: 20px;">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label" style="width: 90px;">
                                                                <div class="span1" style="margin-left: -1px">
                                                                    <h6 style="margin-top: -2px;">Denomination</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px;">Cash Value</h6>
                                                                </div>
                                                            </div>

                                                            <div class="label">
                                                                <div class="span2">
                                                                    <h6 style="margin-top: -2px">Denomination Count</h6>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        @{
                                                            var coins = Model.VaultProcessing.VaultContainerDrops.Where(e => e.DenominationType == "COINS");

                                                            var hasCoins = Model.VaultProcessing.VaultContainerDrops.Any(e => e.DenominationType == "COINS");

                                                            if (hasCoins != true)
                                                            {
                                                                <div class="row all_coins">
                                                                    @Html.Hidden("ContainerDropItemId", 0, new {id = "ContainerDropItemId"})
                                                                    @Html.Hidden("DenominationId", 0, new {id = "DenominationId"})
                                                                    @Html.Hidden("DenominationType", "Coins", new {id = "DenominationType"})

                                                                    <div class="span2">
                                                                        @Html.TextBox("TextCount", "", new {@class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.TextBox("TextValue", "", new {@class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px"})
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList,
                                                                            new { @class = "ValueInCents lock", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px" })
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyValue", "", new {@class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px"})
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyCount", "", new {@class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px"})
                                                                    </div>
                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                        <a class="buttonAddCoins"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                    </div>
                                                                </div>
                                                            }


                                                            foreach (var item in coins)
                                                            {
                                                                var dropDownCoin = item.ValueInCents.ToString();

                                                                <div class="row all_coins">
                                                                    @Html.HiddenFor(a => item.DenominationId, new { id = "DenominationId" })
                                                                    @Html.HiddenFor(a => item.DenominationType, new { id = "DenominationType" })

                                                                    <div class="span2">
                                                                        @Html.TextBox("TextCount", item.Count, new { @class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px" })
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.TextBox("TextValue", item.Value, new { @class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px" })
                                                                    </div>
                                                                    <div class="span2">
                                                                        @Html.DropDownListFor(a => item.ValueInCents, ViewData[dropDownCoin] as SelectList,
                                                                            new { @class = "ValueInCents", @disabled = "disabled", @maxlength = "10", @style = "width:104px; margin-left:30px" })
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyValue", item.DiscrepancyValue, new { @class = "DiscrepancyValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:-2px" })
                                                                    </div>
                                                                    <div>
                                                                        @Html.TextBox("DiscrepancyCount", item.DiscrepancyCount, new { @class = "DiscrepancyCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px" })
                                                                    </div>
                                                                    <div id="all-buttons" class="all-buttons hide">
                                                                        <a class="buttonAddCoins"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }


                                                    </div>
                                                    

                                                    <div class="devideHor"></div>

                                                    <div class="row reasons">
                                                        <div class="span2">
                                                            @Html.Label("Discrepancy Reason", new { @class = "label required", @style = "margin-left:5px; width:155px" })
                                                        </div>
                                                        <div class="span2">
                                                            @Html.DropDownList("DiscrepancyReasonId", ViewData["Reasons"] as SelectList,
                                                                new { @class = "DiscrepancyReasonId", @disabled = "disabled", @required = "required", @style = "width:173px; margin-left:15px" })
                                                        </div>

                                                        <div class="span2 offset1">
                                                            @Html.Label("Comment", new { @class = "label required", @style = "margin-left:58px; width:155px" })
                                                        </div>
                                                        <div class="span3">
                                                            @Html.TextArea("Comment", new { @class = "reasonComment", @readonly = "readonly", @style = "width:165px; margin-left:75px; margin-bottom: 8px; min-height:50px; max-height:70px;" })
                                                        </div>
                                                    </div>

                                                    <div>
                                                        <div class="row">
                                                            <div class="span2">
                                                                @Html.Label("LabelConfirm", "Confirm", new { @class = "label required", @style = "width:160px;" })
                                                            </div>
                                                            <div class="span2">
                                                                @Html.CheckBox("checkConfirm", false, new { @class = "checkConfirm", @required = "required", @style = "margin-left:15px; margin-top:5px" })
                                                            </div>

                                                            <div class="span2 offset1">
                                                                @Html.Label("labelDiscrepancy", "Discrepancy", new { @class = "label required", style = "width:158px;margin-left:58px;" })
                                                            </div>
                                                            <div class="span1">
                                                                @Html.CheckBox("checkDiscrepancy", false, new { @class = "checkDiscrepancy", @style = "margin-left:75px;" })
                                                            </div>
                                                        </div>
                                                    </div>
                                                    
                                                    @Html.Hidden("verifiedBy", new { id = "verifiedBy" })
                                                    @Html.Hidden("desc", new { id = "desc" })

                                                    <!-- Buttons -->
                                                    <div class="row pull-right">
                                                        <div id="release" class="span2">
                                                        </div>
                                                        <div id="sRelease" class="span2">
                                                            <input id="btnSubmit" type="button" style="width: 140px" value="Release" class="btn btn-success" />
                                                            <input type="button" id="btnSupervisorSubmit" style="width: 140px" value="Supervisor Release" class="btn btn-primary hide" />
                                                        </div>
                                                        <div class="span2">
                                                            <button onclick=" exitProcessing() " class="btn btn-mini btn-danger" style="width: 100px !important; margin-left: 30px; font-weight: bold" type="button">Cancel</button>
                                                        </div>
                                                    </div>
                                                    <br />
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                    <!--End ContainerDrop-->
                                </div>
                            </div>
                        </div>

                    </div>
            
                }
            }
        }

                </div>
            </div>


<div id="example" class="k-content">
    <div>
        <script id="reset-confirmation" type="text/x-kendo-template">
            <div class="well">
                <div class="form" id="resetForm" data-role="validator" novalidate="novalidate">
                    <div class="row">
                        <div class="span8">
                            <div id="error-message-holder" style="min-height: 20px; margin-Bottom: 2px; color:red">

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span1">
                            <img src="@Url.Content("~/Content/Images/grid_images/lock.png")" />
                        </div>
                        <div class="span4">
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        <label class="add-on" style="width:120px" for="name">Username<span class="requiredField"> *</span></label>
                                    </div>
                                    <div class="span2">
                                        <input type="text" style="width: 150px; margin-left: -30px" id="supervisorName" name="name" required="required" />
                                    </div>
                                    <div class="span2">
                                        <span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg" id="WarnMessagePasswordR"><span class="k-icon k-warning" id="WarnMessagePasswordR"> </span>Username is Required</span>
                                        <span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg" id="WarnMessageP6orMore"><span class="k-icon k-warning" id="WarnMessageP6orMore"> </span>Username must be 5 or more</span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span2">
                                        <label class="add-on" style="width:120px" for="password">Password<span class="requiredField"> *</span></label>
                                    </div>
                                    <div class="span2">
                                        <input type="password" style="width: 150px; margin-left: -30px" id="supervisorPassword" name="password" required="required" />
                                    </div>
                                    <div class="span2">
                                        <span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg" id="WarnMessageConfirmP"><span class="k-icon k-warning" id="WarnMessageConfirmP"> </span>Password Is Required</span>
                                        <span class="k-widget k-tooltip k-tooltip-validation k-invalid-msg" id="WarnMessagePnotMatch"><span class="k-icon k-warning" id="WarnMessagePnotMatch"> </span>Password must be 6 or more</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="span3 offset1">
                            <button class="reset-confirm btn btn-success" value="Login" style="width:80px">Login</button>
                            <a href="#" class="reset-cancel btn btn-danger" style="width:80px">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </script>

        <script type="text/javascript">

            function exitProcessing() {
                var kendoWindow = $("<div />").kendoWindow({
                    title: "Confirm",
                    resizable: false,
                    modal: true,
                    width: 450,
                    height: 160
                });

                kendoWindow.data("kendoWindow")
                    .content($("#ConfirmWindow").html())
                    .center().open();

                $(".confirmation-message").html("Transaction is not yet saved&nbsp;Do you want to continue?");

                kendoWindow
                    .find(".no-cancel,.confirm-cancel")
                    .click(function () {
                        if ($(this).hasClass("confirm-cancel")) {
                            window.location.href = '@Url.Action("Index")';
                        }

                        kendoWindow.data("kendoWindow").close();
                    })
                    .end();
            }


            function displayVerifyForm() {
                var kendoWindow = $("<div />").kendoWindow({
                    title: "Supervisor Login",
                    resizable: true,
                    modal: true,
                    width: "450px"
                });

                kendoWindow.data("kendoWindow")
                    .content($("#reset-confirmation").html())
                    .center().open();

                $("#WarnMessagePasswordR").hide();
                $("#WarnMessageConfirmP").hide();
                $("#WarnMessageP6orMore").hide();
                $("#WarnMessagePnotMatch").hide();
                $('#password').focusout(function () {
                    if ($('#password').val().length >= 6) {
                        $("#WarnMessagePasswordR").hide();
                        $("#WarnMessageP6orMore").hide();
                        $('#passwordConfirm').focus();

                    }

                });

                kendoWindow
                    .find(".reset-confirm, .reset-cancel")
                    .click(function () {

                        if ($(this).hasClass("reset-cancel")) {
                            kendoWindow.data("kendoWindow").destroy();
                        }

                        if ($(this).hasClass("reset-confirm")) {

                            var _username = $("#supervisorName").val();
                            var _password = $("#supervisorPassword").val();

                            if (_username.length < 5) {
                                $("#WarnMessagePasswordR").show();
                                $('#name').focus();
                                return;
                            }

                            if (_password.length < 6) {
                                $("#WarnMessagePasswordR").hide();
                                $("#WarnMessageP6orMore").show();
                                $("#WarnMessageConfirmP").hide();
                                $('#password').focus();
                                return;
                            }

                            var parameters = { username: _username, password: _password };

										
                            $.ajax(
                            {
                                type: "POST",
                                url: '@Url.Action("VerifyUser")',
                            data: JSON.stringify(parameters),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (data) {
                                if (data.result == "OK") {
                                    $("#verifiedBy").val(data.verifiedByid);
                                    $("#saved").val("true");
                                    $("#check").removeAttr("required");

                                    $("#btnSupervisorSubmit").removeClass('hide');
                                    $("#btnSupervisorSubmit").addClass('show');
                                    $("#btnSubmit").addClass('hide');
                                    kendoWindow.data("kendoWindow").destroy();

                                } else if (data.result == "NO") {
                                    $("#error-message-holder").html(data.message);
                                    $("#desc").val(false);
                                }
                            },
                            error: function (a, b, c) {
                                warningMessageBox("Server Error. Contact SBV Support");
                                $("#desc").val(false);
                                return false;
                            }
                        });
                    }
                }).destroy();
            }
        </script>
    </div>
</div>


<script id="ValidationWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <span class="headerTitle" />
        <span style="margin-left:5px;" class="confirmation-message"></span>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="no-cancel k-button" style="width:80px">Ok</button>
    </div>
</script>

<script id="ConfirmWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
        <button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
    </div>
</script>

<script id="DeleteContainermWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
        <button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
    </div>
</script>

<script id="loadingWindow" type="text/x-kendo-template">
    <div style="margin-left:20px; margin-top:30px;">
        <table>
            <tr>
                <td><img src="@Url.Content("~/Content/Images/loading.gif")" /></td>
                <td style="width:10px;"></td>
                <td><span class="confirmation-message"></span></td>
            </tr>
        </table>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel" style="width:80px; visibility:hidden">Yes</button>
    </div>
</script>

<script id="MessageWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/infoimg.jpg")" class="imager" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:15px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Ok</button>
    </div>
</script>

<div class="hide top">
    <div class="row all_notes added" id="notesClone">

        @Html.Hidden("ContainerDropItemId", 0, new { id = "ContainerDropItemId" })
        @Html.Hidden("DenominationId", 0, new { id = "DenominationId" })
        @Html.Hidden("DenominationType", "Notes", new { id = "DenominationType" })

        <div class="span2">
            @Html.TextBox("TextCount", "", new { @class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px" })
        </div>
        <div class="span2">
            @Html.TextBox("TextValue", "", new { @class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px" })
        </div>
        <div class="span2">
            @Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList,
    new { @class = "ValueInCents", @maxlength = "10", @style = "width:104px; margin-left:30px" })
        </div>
        <div>
            @Html.TextBox("DiscrepancyValue", "", new { @class = "DiscrepancyValue", @maxlength = "10", @style = "width:158px; margin-left:-2px" })
        </div>
        <div>
            @Html.TextBox("DiscrepancyCount", "", new { @class = "DiscrepancyCount", @maxlength = "10", @style = "width:158px" })
        </div>
        <div id="all-buttons">
            <a class="buttonAddNotes"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
            <a class="buttonRemoveNotes"><img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" /></a>
        </div>
    </div>

</div>

<div class="hide top">
    <div class="row all_coins added" id="coinsClone">
        @Html.Hidden("ContainerDropItemId", 0, new { id = "ContainerDropItemId" })
        @Html.Hidden("DenominationId", 0, new { id = "DenominationId" })
        @Html.Hidden("DenominationType", "Coins", new { id = "DenominationType" })

        <div class="span2">
            @Html.TextBox("TextCount", "", new { @class = "TextCount", @readonly = "readonly", @maxlength = "10", @style = "width:158px" })
        </div>
        <div class="span2">
            @Html.TextBox("TextValue", "", new { @class = "TextValue", @readonly = "readonly", @maxlength = "10", @style = "width:158px; margin-left:15px" })
        </div>
        <div class="span2">
            @Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList,
    new { @class = "ValueInCents", @maxlength = "10", @style = "width:104px; margin-left:30px" })
        </div>
        <div>
            @Html.TextBox("DiscrepancyValue", "", new { @class = "DiscrepancyValue", @maxlength = "10", @style = "width:158px; margin-left:-2px" })
        </div>
        <div>
            @Html.TextBox("DiscrepancyCount", "", new { @class = "DiscrepancyCount", @maxlength = "10", @style = "width:158px" })
        </div>
        <div id="all-buttons">
            <a class="buttonAddCoins"><img src="~/Content/images/add.png" alt="Add denomination" class="allButtonsBorder" /></a>
            <a class="buttonRemoveCoins"><img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" /></a>
        </div>
    </div>
</div>

@section Scripts {
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/themes/base/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")

}

<script type="text/javascript">

    function loadingWindow() {
        var message = "Please wait...<br>Processing Cash Deposit";
        var windowId = "loadingWindow";
        showDepositProcessingBox(windowId, message);
        $("#loadingWindow").find(".k-window-action").css("visibility", "hidden");
    }

    function showDepositProcessingBox(windowId, message) {
        var kendoWindow = $("<div />").kendoWindow({
            title: "",
            resizable: false,
            modal: true,
            width: 430,
            height: 160
        });

        kendoWindow.data("kendoWindow")
            .content($("#" + windowId).html())
            .center().open();
        $(".confirmation-message").html(message);

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }

</script>

<script>
	var row_clone_notes;
	var row_clone_coins;
	$(function () {

		$(".slider").click(function () {
			var parent = $(this).parents(".container-area");
			var expandable = parent.find(".expand-one");
			expandable.slideToggle('fast');
		});
		$(".drop-slider").click(function () {
			var parent = $(this).parents(".drop-area");
			var expandable = parent.find(".expand-one");
			expandable.slideToggle('fast');
		});
		row_clone_notes = $("#notesClone").clone(true);
		row_clone_coins = $("#coinsClone").clone(true);

		// Add Notes
		$(".buttonAddNotes").on('click', function () {
			var containerDrop = $(this).parents(".containerDrop");
			var items = containerDrop.find(".all_notes select");

			if ('@ViewBag.NotesCount' > items.length) {
				var currentRow = $(this).parents(".all_notes");
				row_clone_notes.clone(true).insertAfter(currentRow);

				var dropdown = currentRow.next().find(".ValueInCents");
				removeSelectedDenomination(dropdown, items);
			}
		});

		// Add Coins
		$(".buttonAddCoins").on('click', function () {
			var containerDrop = $(this).parents(".containerDrop");
			var items = containerDrop.find(".all_coins select");

			if ('@ViewBag.CoinsCount' > items.length) {
				var currentRow = $(this).parents(".all_coins");
				row_clone_coins.clone(true).insertAfter(currentRow);

				var dropdown = currentRow.next().find(".ValueInCents");
				removeSelectedDenomination(dropdown, items);
			}
		});

		// Remove Notes
		$(".buttonRemoveNotes").on('click', function () {
			var dropAmount = $(this).parents(".containerDrop").find(".dropAmount");
			var currentRow = $(this).parents(".all_notes");

			var containerDrop = $(this).parents(".containerDrop");
			var dropdown = currentRow.find(".ValueInCents");
			var items = containerDrop.find(".all_notes select").not(dropdown);
			addRemovedSelectedDenomination(dropdown, items);

			currentRow.remove();
			dropSum(dropAmount);
		});

		// Remove Coins
		$(".buttonRemoveCoins").on('click', function () {
			var dropAmount = $(this).parents(".containerDrop").find(".dropAmount");
			var currentRow = $(this).parents(".all_coins");

			var containerDrop = $(this).parents(".containerDrop");
			var items = containerDrop.find(".all_coins select");
			var dropdown = currentRow.find(".ValueInCents");
			addRemovedSelectedDenomination(dropdown, items);

			currentRow.remove();
			dropSum(dropAmount);
		});
        
		
		$(".DiscrepancyCount").on("keyup", function () {
			var self = $(this);
			var row = $(this).parents(".all_coins, .all_notes");
			var count = $(this).val();
			var denomination = row.find(".ValueInCents").val();
			var textValue = row.find(".DiscrepancyValue");
			
			if (denomination == 1000500) {
				$(this).val("");
				textValue.val("");
				dropSum(self);
				return false;
			}

			var isValidNumber = isNumeric(count);

			var countLength = self.val().length;
			if (self.val().charAt(countLength - 1) == ".") {
				isValidNumber = false;
			}

			if (isValidNumber == false) {
				warningMessageBox("Please enter a valid number without spaces or special characters or Decimal Point!");
				$(this).val("");
				textValue.val("");
				dropSum(self);
				return false;
			}
			textValue.val(((parseFloat(denomination) / 100.0) * parseFloat(count)).toFixed(2));

			dropSum(self);
		});


		function clearDiscrepancy(control) {
			var containerDrop = control.parents(".drop_items");
			var discrepancy = containerDrop.find(".discrepancyDropTotal");
			var dropDiscrepancy = 0;
			var dropActualTotal = containerDrop.find(".DropActualTotal");
			discrepancy.val(dropDiscrepancy.toFixed(2));
			dropActualTotal.val(dropDiscrepancy.toFixed(2));
		}


		$(".DiscrepancyValue").on("blur", function () {
			var self = $(this);
			var row = $(this).parents(".all_coins, .all_notes");
			var textValue = $(this).val();
			var denomination = row.find(".ValueInCents").val();
			var count = row.find(".DiscrepancyCount");
			var text = $.trim(self.val());

			textValue = textValue.charAt(0) == "." ? "0" + textValue : textValue;
			$(this).val(textValue);

			var isValidNumber = isNumeric(textValue);

			if (isValidNumber == false || denomination == 1000500 || textValue == "") {

				if (text.length > 0) {
					warningMessageBox("Please enter a valid number without spaces or special characters!");
				}
				count.val("");
				$(this).val("");
				dropSum(self);
				return false;
			}
			var amount = parseFloat(textValue);
			var moneyDeno = parseFloat(denomination);
			var cashValue = (parseFloat(amount) * 100).toFixed(0);

			var isMultiple = cashValue % moneyDeno == 0;

			if (isMultiple == false) {
				var selectedText = row.find(".ValueInCents option:selected").text();
				var deno = parseInt(denomination) / 100;
				var randSymbol = deno < 1 ? "" : "R";

				if (text.length > 0) {
					warningMessageBox("Please enter multiples of <b>" + randSymbol + selectedText + "</b> as value !<br>Make sure you entered a number without spaces or special characters!");
				}

				$(this).val("");
				count.val("");
			}
			else {
				var discrepanciesCount = parseFloat(textValue) / (parseFloat(denomination) / 100.0);
				count.val(Math.abs(parseFloat(discrepanciesCount).toFixed(0)));
			}

			dropSum(self);
		});
		

		function isNumeric(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}


		$(".ValueInCents").on("change", function () {
			var self = $(this);
			var row = $(this).parents(".all_coins, .all_notes");
			var denomination = $(this).val();
			var count = row.find(".DiscrepancyCount");
			var textValue = row.find(".DiscrepancyValue");

			if ($.trim(count.val()) == "" && $.trim(textValue.val()) == "") {

			} else if (denomination == 1000500) {
				count.val("");
				textValue.val("");
			} else if ($.trim(count.val()) != "" && !isNaN(count.val())) {
				textValue.val((parseFloat(denomination) / 100.0) * parseFloat(count.val()));
			} else if ($.trim(textValue.val()) != "" && !isNaN(textValue.val())) {
				var discrepancyOnCount = parseFloat(textValue.val()) / (parseFloat(denomination) / 100.0);
				count.val(discrepancyOnCount);
			}

			dropSum(self);

			var containerDrop = $(this).parents(".containerDrop");
			var items = containerDrop.find(".ValueInCents").not(self);
			removeSelectedDenominationOnChange(self, items);
		});

		// Check if all discrepancy boxes are empty
		function allEmpty(items) {
			var isAllNull = true;
			items.each(function () {
				var temp = $(this).val();

				if ($.trim(temp) != "") {
					isAllNull = false;
				}
			});
			return isAllNull;
		}

		// Calculate DROP SUM
		//if ($(".checkDiscrepancy").is(':checked'))
		function dropSum(control) {
		    var isVaultDeposit = $("#hdIsVaultDeposit").val();

		    if (isVaultDeposit == true || isVaultDeposit == 'True' || isVaultDeposit == 'true') {
		        vaultProccessing(control);
		    }
		    else {
		        cashProccessing(control);
		    }
		}
        

		function cashProccessing(control) {
		    var containerDrop = control.parents(".drop_items");
		    var dropActualTotal = containerDrop.find(".DropActualTotal");

		    var discrepancyDropTotal = containerDrop.find(".discrepancyDropTotal");
		    var dropDiscrepancyValues = containerDrop.find(".DiscrepancyValue");

		    var isAllEmpty = allEmpty(dropDiscrepancyValues);

		    var sum = 0;
		    var discrepancySum = 0;
		    var actualSum = 0;

		    dropDiscrepancyValues.each(function () {
		        var discrepancyValue = $.trim($(this).val());
		        var html = $(this).parents(".all_coins, .all_notes");
		        var advised = $.trim(html.find(".TextValue").val());

		        if (discrepancyValue != "") {
		            sum += parseFloat(discrepancyValue);
		            advised = (advised == "") ? 0 : advised;
		            discrepancySum += (parseFloat(discrepancyValue) - parseFloat(advised));
		            actualSum += parseFloat(discrepancyValue);
		        } else {
		            if (advised != "") {
		                actualSum += parseFloat(advised);
		            }
		        }
		    });

		    if (isAllEmpty || parseFloat(discrepancySum) == 0) {
		        actualSum = 0;
		    }

		    discrepancyDropTotal.val(discrepancySum.toFixed(2));

		    var actualAmount = Math.abs(actualSum);
		    dropActualTotal.val(actualAmount.toFixed(2));

		    // clear discrepancy
		    if ($.trim(control.val()) == '' || $.trim(control.val()) == '1000500') {
		        clearDiscrepancy(control);
		    }
		    containerSum(containerDrop);
		}


		function vaultProccessing(control) {
		    var containerDrop = control.parents(".containerholder");
		    var dropActualTotal = containerDrop.find(".cActualAmount");
		    var discrepancyDropTotal = containerDrop.find(".cDiscrepancyAmount");

		    var dropTextValues = containerDrop.find(".DiscrepancyValue");

		    var sum = 0;
		    var discrepancySum = 0;
		    var actualSum = 0;

		    dropTextValues.each(function() {
		        var temp = $(this).val();
		        var html = $(this).parents(".all_coins, .all_notes");
		        var advised = html.find(".TextValue").val();

		        if ($.trim(temp) != "") {
		            sum += parseFloat(temp);
		            advised = (advised == '') ? 0 : advised;
		            discrepancySum += parseFloat(temp) - parseFloat(advised);
		            actualSum += parseFloat(temp);
		        } else {
		            if ($.trim(advised) != "") {
		                actualSum += parseFloat(advised);
		            }
		        }
		    });

		    discrepancyDropTotal.val(discrepancySum.toFixed(2));
		    dropActualTotal.val(actualSum.toFixed(2));

		    // clear discrepancy
		    if ($.trim(control.val()) == '' || $.trim(control.val()) == '1000500') {
		        clearDiscrepancy(control);
		    }
		}


		//
		// calculate container sum
		function containerSum(containerDrop) {
			var container = containerDrop.parents(".container");
			var discrepancyTextBoxes = container.find(".DiscrepancyValue");
			var isAllEmpty = allEmpty(discrepancyTextBoxes);

			var containerDrops = container.find(".drop_items");
			var hasDiscrepancy = false;
			var discrepancySum = 0;
			var actualSum = 0;

			containerDrops.each(function () {
				var drop = $(this);
				var dropTextValues = drop.find(".DiscrepancyValue");
				var sum = 0;

                // calculate for each drop
				dropTextValues.each(function () {
				    var temp = $(this).val();
				    var html = $(this).parents(".all_coins, .all_notes");
				    var advised = html.find(".TextValue").val();

				    if ($.trim(temp) != "") {
				        sum += parseFloat(temp);
				        advised = (advised == '') ? 0 : advised;
				        discrepancySum += parseFloat(temp) - parseFloat(advised);
				        actualSum += parseFloat(temp);
				    } else {
				        if ($.trim(advised) != "") {
				            actualSum += parseFloat(advised);
				        }
				    }
				});

				if (!isAllEmpty || parseFloat(discrepancySum) != 0) {
				    hasDiscrepancy = true;
				}
				else {
				    actualSum = 0;
				}
			});
			container.find(".ContainerDescrepancyAmount").val(parseFloat(discrepancySum).toFixed(2));
			container.find(".ContainerActualAmount").val(Math.abs(actualSum).toFixed(2));
			depositSum();//
		}



		function depositSum() {
			var containers = $(".containerholder").find(".container");

			var finalActualAmount = 0;
			var finalDiscrepancyAmount = 0;

			containers.each(function() {
				var container = $(this);
				var actual = container.find(".ContainerActualAmount").val();
				var discrepancy = container.find(".ContainerDescrepancyAmount").val();

				var discrepancyTextBoxes = container.find(".DiscrepancyValue");
				var isAllEmpty = allEmpty(discrepancyTextBoxes);

				if (isAllEmpty) {
					finalActualAmount += 0;
				}
				else {
					finalActualAmount += parseFloat(actual);
				}

				finalDiscrepancyAmount += parseFloat(discrepancy);
			});

			$(".ActualAmount").val(finalActualAmount);
			$(".DiscrepancyAmount").val(finalDiscrepancyAmount);
		}



		function removeSelectedDenomination(selectedDropdown, collection) {

			collection.each(function () {
				var item = $(this);

				var options = selectedDropdown.find("option");

				options.each(function () {
					var option = $(this);

					if (option.val() != 1000500) {
						if (item.val() == option.val()) {
							option.remove();
						}
					}
				});
				item.trigger("chosen:updated");
			});
		}

		function removeSelectedDenominationOnChange(selectedDropdown, collection) {

			collection.each(function () {
				var item = $(this);

				var options = item.find("option");

				options.each(function () {
					var option = $(this);

					if (option.val() != 1000500) {
						if (selectedDropdown.val() == option.val()) {
							option.remove();
						}
					}
				});
				item.trigger("chosen:updated");
			});
		}

		function addRemovedSelectedDenomination(dropdown, collection) {

			collection.each(function () {
				var item = $(this);

				var options = item.find("option");
				var selectedOption = dropdown.find("option:selected");

				var option = options.first();
				var toAdd = "<option value=" + selectedOption.val() + ">" + selectedOption.text() + "</option>";
				option.eq(0).after(toAdd);

			});
		}

		$(".checkConfirm").on("click", function () {
			var containerDrop = $(this).parents(".drop_items");
			var subContainerHeader = containerDrop.find("#subContainerHeader");

			if ($(this).is(':checked')) {
				subContainerHeader.removeClass("not-processed");
				subContainerHeader.addClass("processed");
				subContainerHeader.find(".subContainerlink").html('Completed');
				markParentProccessed(containerDrop);
			} else {
				subContainerHeader.addClass("not-processed");
				subContainerHeader.removeClass("processed");
				subContainerHeader.find(".subContainerlink").html('Process');
				unmarkParentProccessed(containerDrop);
			}
		});

		function markParentProccessed(containerDrop) {
			var parent = containerDrop.parents(".container-area");
			var drops = parent.find(".drop_items");
			var containerHeader = parent.find(".container-header");

			var isProcessed = true;
			drops.each(function () {
				var subContainerHeader = $(this).find("#subContainerHeader");
				if (!subContainerHeader.hasClass("processed")) {
					return isProcessed = false;
				}
			});

			if (isProcessed) {
				containerHeader.addClass("processed");
			}
		}

		function unmarkParentProccessed(containerDrop) {
			var parent = containerDrop.parents(".container-area");
			var containerHeader = parent.find(".container-header");
			containerHeader.removeClass("processed");
		}
					

		$(".checkDiscrepancy").click(function () {
			var containerDrop = $(this).parents(".drop_items");

			var discrepancy = containerDrop.find(".discrepancyDropTotal");
			var dropAmount = containerDrop.find(".DropActualTotal");

			//var dummyValue = 0;
			//discrepancy.val(dummyValue.toFixed(2));
			//dropAmount.val(dummyValue.toFixed(2));
			

			if ($(this).is(':checked')) {

				containerDrop.find(".all-buttons").removeClass("hide");
				containerDrop.find(".DiscrepancyValue, .DiscrepancyCount").removeAttr("readonly");
				containerDrop.find(".DiscrepancyValue, .DiscrepancyCount").removeAttr("disabled");
				containerDrop.find(".DiscrepancyReasonId").removeAttr("disabled");
				containerDrop.find(".reasonComment").removeAttr("readonly");
				containerDrop.find(".lock").removeAttr("disabled");
			} else {
				containerDrop.find(".all-buttons").addClass("hide");
				containerDrop.find(".DiscrepancyValue, .DiscrepancyCount").attr("readonly", true);
				containerDrop.find(".DiscrepancyValue, .DiscrepancyCount").attr("disabled", true);

				containerDrop.find(".DiscrepancyReasonId").attr("disabled", true);
				containerDrop.find(".reasonComment").attr("readonly", true);

				containerDrop.find(".DiscrepancyValue, .DiscrepancyCount").val("");
				containerDrop.find(".added").remove();

				containerDrop.find(".lock").val(1000500);
				containerDrop.find(".lock").attr("disabled", true);
				dropSum($(this));
			}
		});

		function hasErrorOnValidation() {
			var hasError = false;
			var message = "<ul style='list-style-image:url(@Url.Content("~/Content/images/bullet.jpg")) !important;'>";

			if (!confirmed()) {
				hasError = true;
				message += "<li>Not All Deposits have been Confirmed.</li>\n";
			}

			var isRequiredDiscrepancy = isDiscrepancyReasonRequired();

			if (isRequiredDiscrepancy) {
				hasError = true;
				message += "<li>Please enter Discrepancy Reason(s)</li>\n";
			}

			if (validateAllControls() == false) {
				hasError = true;
				message += "<li>Enter valid Discrepancy values</li>\n";
			}

			message += "</ul>";

			if (hasError) {
				$(".confirmation-message").html("Valaidation failed on:");
				validationMessageBox(message);
			}

			return hasError;
		}


		function isDiscrepancyReasonRequired() {
			var result;
			$(".checkDiscrepancy").each(function () {
				var discrepancyReasonId = $(this).parents(".containerDrop").find(".DiscrepancyReasonId").val();
				if (($(this).is(':checked'))) {
					if (discrepancyReasonId <= 0) {
						result = true;
						return true;
					}
				}
				else {
					result = false;
				}
			});
			return result;
		}

		function confirmed() {
			var result;
			$(".checkConfirm").each(function () {
				if (!($(this).is(':checked'))) {
					result = false;
					return false;
				} else {
					result = true;
				}
			});
			return result;
		}

		function isValid(elementValue) {
			if ($.trim(elementValue) == "") {
				if (isNaN($.trim(elementValue))) {
					return false;
				}
			}
			return true;
		}

		function validateAllControls() {
			var count = 0;
			var checkedDiscrepancies = $(".checkDiscrepancy");

			checkedDiscrepancies.each(function () {
				if ($(this).is(':checked')) {
					var inputValues = $(this).parents(".drop_items").find(".DiscrepancyValue");

					inputValues.each(function () {

						if (!isValid($(this).val())) {
							$(this).css({ 'border-color': 'red' });
							count++;
						} else {
							$(this).css({ 'border-color': '#d1c7ac' });
						}
					});
				}
			});

			return (count <= 0);
		}

		function completeDepositConfirmation() {
			var kendoWindow = $("<div />").kendoWindow({
				title: "Cash Deposit Processing",
				resizable: false,
				modal: true,
				width: 430,
				height: 160
			});

			kendoWindow.data("kendoWindow")
				.content($("#ConfirmWindow").html())
				.center().open();

			$(".confirmation-message").html("Are you sure that you want to complete this cash processing task? ");

			kendoWindow
				.find(".no-cancel,.confirm-cancel")
				.click(function () {
					if ($(this).hasClass("confirm-cancel")) {

					    var isVaultDeposit = $("#hdIsVaultDeposit").val();

					    if (isVaultDeposit == true || isVaultDeposit == 'True' || isVaultDeposit == 'true') {
					        processVault();
					    }
					    else {
					        processDeposit();
					    }
					}

					kendoWindow.data("kendoWindow").close();
				})
				.end();
		}

		$("#btnSubmit").click(function () {
			if (hasErrorOnValidation() == false) {
				if (discrepancyCount() > 0) {
					displayVerifyForm();
				}
				else {
					completeDepositConfirmation();
				}

				return true;
			}
		});

		function discrepancyCount() {
			var discripencyCount = 0;
			var discripencies = $(".checkDiscrepancy");

			discripencies.each(function () {
				if ($(this).is(':checked')) {
					discripencyCount++;
				}
			});

			return discripencyCount;
		}

		$("#btnSupervisorSubmit").click(function () {
		    var isVaultDeposit = $("#hdIsVaultDeposit").val();
		   
		    if (isVaultDeposit == true || isVaultDeposit == 'True' || isVaultDeposit == 'true') {
		        processVault();
		    }
		    else {
		        processDeposit();
		    }
		});


        // Process Vault Deposit
		function processVault() {
		    loadingWindow();
		    // post to the database
		    var actualAmount;

		    if ($(".cActualAmount").val() <= 0)
		        actualAmount = $(".cDepositAmount").val();
		    else {
		        actualAmount = $(".cActualAmount").val();
		    }
            
		    var vaultContainer = {
		        ContainerId: $("#hdvContainerId").val(),
		        VaultContainerId: $("#hdvVaultContainerId").val(),
		        CashDepositId: $("#hdvCashDepositId").val(),
		        SiteId: $("#hdvSiteId").val(),
		        CitCode: $("#hdvCitCode").val(),
		        SerialNumber: $("#hdvSerialNumber").val(),
		        DeviceId: $("#hdvDeviceId").val(),
		        ProductTypeId: $("#hdvProductTypeId").val(),
		        Comment: $(".reasonComment").val(),
		        DiscrepancyReasonId: $(".DiscrepancyReasonId").val(),
		        Amount: $(".cDepositAmount").val(),
		        ActualAmount: actualAmount,
		        DiscrepancyAmount: $(".cDiscrepancyAmount").val(),
		        SupervisorId: $("#verifiedBy").val(),
		        HasDiscrepancy: parseFloat($(".cDiscrepancyAmount").val()) > 0 || parseFloat($(".cDiscrepancyAmount").val()) < 0,
		        VaultContainerDrops: []
		    };
            
		    var containerDrops = $(".drop_items").find(".all_notes, .all_coins");

		    containerDrops.each(function() {
		        var item = $(this);
		        var actualCount;

		        if (item.find(".DiscrepancyCount").val() <= 0 || $.trim(item.find(".DiscrepancyCount").val()) == '')
		            actualCount = item.find(".TextCount").val();
		        else
		            actualCount = item.find(".DiscrepancyCount").val();

		        var theDiscrepancy = $.trim(item.find(".DiscrepancyValue").val());
		        var hasDiscrepancy = theDiscrepancy.length != "";

		        var actualValue;

		        if (item.find(".DiscrepancyValue").val() <= 0 ||
                    $.trim(item.find(".DiscrepancyValue").val()) == '')
		            actualValue = item.find(".TextValue").val();
		        else
		            actualValue = item.find(".DiscrepancyValue").val();
                
		        var vaultContainerDrop = {
		            VaultContainerId: vaultContainer.ContainerId,
		            DenominationId: item.find("#DenominationId").val(),
		            ValueInCents: item.find(".ValueInCents").val(),
		            Count: item.find(".TextCount").val(),
		            Value: item.find(".TextValue").val(),
		            DiscrepancyCount: item.find(".DiscrepancyCount").val(),
		            DiscrepancyValue: item.find(".DiscrepancyValue").val(),
		            ActualCount: actualCount,
		            ActualValue: actualValue,
		            HasDiscrepancy: hasDiscrepancy,
		            DenominationType: item.find("#DenominationType").val()
		        };

		        if ((vaultContainerDrop.DiscrepancyCount != "" || vaultContainerDrop.Count > 0) && vaultContainerDrop.DiscrepancyValue != "" || vaultContainerDrop.Value > 0) {
		            // Create Vault Drops
		            vaultContainer.VaultContainerDrops.push(vaultContainerDrop);;
		        }
		    });


		    var parameters = { vaultDepositDto: vaultContainer };

		    $.ajax(
			{
			    type: "POST",
			    url: '@Url.Action("ProcessVault")',
			    data: JSON.stringify(parameters),
			    contentType: "application/json; charset=utf-8",
			    dataType: "json",
			    success: function (data) {
			        window.location.href = '@Url.Action("Index")';
			    },
			    error: function (a, b, c) {
			        window.location.href = '@Url.Action("Index")';
			    }
			});
		}

        // Process Cash deposit
		function processDeposit() {
			loadingWindow();

		    // get discrepancy
			var discrepancyAmount = $(".DiscrepancyAmount").val();

			var hasDiscrepancy = (parseFloat(discrepancyAmount) > 0 || parseFloat(discrepancyAmount) < 0);

            // calculate actual amount
			var actualAmount = hasDiscrepancy ? $(".ActualAmount").val() : $("#DepositedAmount").val();

			var cashDeposit = {
				CashDepositId: $("#hdCashDepositId").val(),
				DepositTypeId: $("#hdDepositTypeId").val(),
				SiteId: $("#hdSiteId").val(),
				DeviceId: $("#hdDeviceId").val(),
				AccountId: $("#hdAccountId").val(),
				ProductTypeId: $("#hdProductTypeId").val(),
				Narrative: $("#Narrative").val(),
				TransactionReference: $("#TransactionReference").val(),
				DepositedAmount: $("#DepositedAmount").val(),
				ActualAmount: actualAmount,
				DiscrepancyAmount: discrepancyAmount,
				CreateDate: $(".CreateDate").val(),
				CreatedById: $(".CreatedById").val(),
				SupervisorId: $("#verifiedBy").val(),
				SubmitDateTime: $(".SubmitDateTime").val(),
				VaultAmount: $(".hdVaultAmt").val(),
				VaultSource: $(".hdVaultSrc").val(),
				SettlementIdentifier: $(".hdSettIdentifier").val(),
				iTramsUserName: $(".hdiTramsUserName").val(),
				CitDateTime: $(".hdCitDateTime").val(),
				SendDateTime: $(".hdSendDateTime").val(),
				Confirm: $(".hdConfirm").val(),
				IsDescripency: hasDiscrepancy,
                Containers: []
			};

			var containers = $(".well").find(".container");

			containers.each(function () {
				var bag = $(this);
				var bagActualAmount;

				if (bag.find(".ContainerActualAmount").val() <= 0)
					bagActualAmount = bag.find("#totalContainerAmount").val();
				else
					bagActualAmount = bag.find(".ContainerActualAmount").val();

				var container = {
					ContainerId: bag.find("#ContainerId").val(),
					CashDepositId: cashDeposit.CashDepositId,
					ContainerTypeId: bag.find("#ContainerTypeId").val(),
					SerialNumber: bag.find("#SerialNumber").val(),
					ReferenceNumber: bag.find("#ReferenceNumber").val(),
					SealNumber: bag.find("#SealNumber").val(),
					IsPrimaryContainer: bag.find("#IsPrimaryContainer").val() == "True",
					Amount: bag.find("#totalContainerAmount").val(),
					DiscrepancyAmount: bag.find(".ContainerDescrepancyAmount").val(),
					ActualAmount: bagActualAmount,
					ContainerDrops: []
				};

				var containerDrops = bag.find(".containerDrop");

				containerDrops.each(function () {
					var drop = $(this);
					var dropActualAmount = parseFloat(drop.find(".dropAmount").val()) +
                                           parseFloat(drop.find(".discrepancyDropTotal").val());
                    
					var containerDrop = {
						ContainerDropId: drop.find("#ContainerDropId").val(),
						ContainerId: container.ContainerId,
						DiscrepancyReasonId: drop.find(".DiscrepancyReasonId").val(),
						ReferenceNumber: drop.find("#ReferenceNumber").val(),
						BagSerialNumber: drop.find("#BagSerialNumber").val(),
						HasDiscrepancy: false,
						Amount: drop.find(".dropAmount").val(),
						Narrative: drop.find("#Narrative").val(),
						DiscrepancyAmount: drop.find(".discrepancyDropTotal").val(),
						ActualAmount: dropActualAmount,
						Comment: drop.find(".reasonComment").val(),
						Number: drop.find("#Number").val(),
						ContainerDropItems: []
					};

					var containerDropItems = drop.find(".all_notes, .all_coins");

					containerDropItems.each(function () {
					    var item = $(this);

					    var discrepancy = $.trim(item.find(".DiscrepancyValue").val());

						var actualCount;

						if (discrepancy == "")
							actualCount = item.find(".TextCount").val();
						else
							actualCount = item.find(".DiscrepancyCount").val();

						var actualValue;

						if (discrepancy == "")
							actualValue = item.find(".TextValue").val();
						else
							actualValue = item.find(".DiscrepancyValue").val();

						if (discrepancy.length != "") {
						    containerDrop.HasDiscrepancy = true;
						}

						var containerDropItem = {
							ContainerDropItemId: item.find("#ContainerDropItemId").val(),
							ContainerDropId: containerDrop.ContainerDropId,
							DenominationId: item.find("#DenominationId").val(),
							ValueInCents: item.find(".ValueInCents").val(),
							Count: item.find(".TextCount").val(),
							Value: item.find(".TextValue").val(),
							DiscrepancyCount: item.find(".DiscrepancyCount").val(),
							DiscrepancyValue: item.find(".DiscrepancyValue").val(),
							ActualCount: actualCount,
							ActualValue: actualValue,
							DenominationType: item.find("#DenominationType").val(),
							DenominationName: item.find(".ValueInCents option:selected").text()
						};

						if ((containerDropItem.DiscrepancyCount != "" || containerDropItem.Count > 0) && containerDropItem.DiscrepancyValue != "" || containerDropItem.Value > 0) {
							containerDrop.ContainerDropItems.push(containerDropItem);
						}
					});
					container.ContainerDrops.push(containerDrop);
				});

				cashDeposit.Containers.push(container);
			});

			var parameters = { cashDepositDto: cashDeposit };
           

			$.ajax(
			{
				type: "POST",
				url: '@Url.Action("Process")',
				data: JSON.stringify(parameters),
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (data) {
					window.location.href = '@Url.Action("Index")';
				},
				error: function (a, b, c) {
					window.location.href = '@Url.Action("Index")';
				}
			});
        }
    });


    function CashProcessingMessage(windowId, header, errorWarning, message, listUrl) {
        var kendoWindow = $("<div />").kendoWindow({
            title: header,
            resizable: false,
            modal: true,
            width: 430,
            height: 160
        });

        kendoWindow.data("kendoWindow")
            .content($("#" + windowId).html())
            .center().open();

        $(".confirmation-message").html(message);
        $(".headerTitle").html(errorWarning);

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                if ($(this).hasClass("confirm-cancel")) {
                    window.location.href = listUrl;
                }

                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }

    function warningMessageBox(message) {
        var kendoWindow = $("<div />").kendoWindow({
            title: "Cash Deposit Processing",
            resizable: false,
            modal: true,
            width: 400,
            height: 150
        });

        kendoWindow.data("kendoWindow")
            .content($("#MessageWindow").html())
            .center().open();

        $(".confirmation-message").html(message);

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }

    function validationMessageBox(message) {
        var kendoWindow = $("<div />").kendoWindow({
            title: "Cash Processing Validation",
            resizable: false,
            modal: true,
            width: 470,
            height: 200
        });

        kendoWindow.data("kendoWindow")
            .content($("#ValidationWindow").html())
            .center().open();

        $(".confirmation-message").html(message);

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }

</script>
