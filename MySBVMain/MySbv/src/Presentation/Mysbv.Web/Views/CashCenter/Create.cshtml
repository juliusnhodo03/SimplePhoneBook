@using Kendo.Mvc.UI
@model Application.Dto.CashCenter.CashCentreDto

@{
    ViewBag.Title = "Add New Cash Centre";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .label {
        width: 100px !important;
    }


    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>


<div class="well">

    <!--<h2> Add New Cash Centre </h2> -->
    <p>Fields marked with an asterisk <span class="requiredField">*</span> are required</p>

    <div class="ui-widget-header">
        <h4 style="margin-left: 5px"> Add New Cash Centre</h4>
    </div>

    <div id="content">

        @using (Html.BeginForm())
        {
            @Html.ValidationSummary()

            <div class="ui-widget-content" style="padding: 5px;">

                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            <div> @Html.LabelFor(model => model.Name, new { @class = "add-on required", @style = "width:150px" })<span class="requiredField">*</span></div>
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Name, new { @maxlength ="20"})
                        </div>

                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.Number, new { @class = "label required", @style = "width:150px !important" })<span class="requiredField">*</span>
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Number, new { maxlength = 6})
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            @Html.LabelFor(model => model.EmailAddress1, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.EmailAddress1, new {@maxlength ="50", @class = "tbstyle" })
                        </div>

                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.EmailAddress2, new { @class = "add-on", @style = "width:150px" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.EmailAddress2, new { @maxlength ="50",@class = "tbstyle" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            @Html.LabelFor(model => model.EmailAddress3, new { @class = "add-on", @style = "width:150px" })<span class="requiredField">*</span>
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.EmailAddress3, new { maxlength = 50 })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="span2">
                        @Html.LabelFor(model => model.ClusterId, new { @class = "label required", @style = "width:150px !important" })
                    </div>
                        <div class="span2">
                            @(Html.Kendo().DropDownList()
                                  .Name("ClusterId") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                                  .DataTextField("Name") //Specifies which property of the Product to be used by the dropdownlist as a text.
                                  .DataValueField("Id") //Specifies which property of the Product to be used by the dropdownlist as a value.
                                  .DataSource(source =>
                                  {
                                      source.Read(read =>
                                      {
                                          read.Action("GetRegions", "CashCenter"); //Set the Action and Controller name
                                      })
                                          .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                                  }).HtmlAttributes(new { @style = "width: 243px;" })
                            )
                        </div>

                    <div class="span2 offset2">
                        @Html.LabelFor(model => model.CityId, new { @class = "label required", @style = "width:150px !important" })
                    </div>

                    <div class="span2">
                        @(Html.Kendo().DropDownListFor(a => a.CityId).BindTo(ViewData["Cities"] as SelectList).HtmlAttributes(new { @style = "width:243px;" }))                 
                    </div>
                </div>
                
                <div class="row">
                    <div>
                        <div class="span2">
                            @Html.LabelFor(model => model.Address.AddressTypeId, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        
                        <div class="span2">
                            @(Html.Kendo().DropDownListFor(a => a.Address.AddressTypeId).BindTo(ViewData["AddressTypes"] as SelectList).HtmlAttributes(new { @style = "width:243px;" }))                    
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class=" input-prepend">
                        <div class="span2">
                            @Html.Label("AddressLine1", new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Address.AddressLine1, new { @maxlength ="50",id = "AddressLine1" })
                        </div>

                        <div class="span2 offset2">
                            @Html.Label("AddressLine2", new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Address.AddressLine2, new { @maxlength ="50",id = "AddressLine2" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class=" input-prepend">
                        <div class="span2">
                            @Html.Label("AddressLine3", new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Address.AddressLine3, new {@maxlength ="50", id = "AddressLine3" })
                        </div>

                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.Address.PostalCode, new { @class = "add-on required", @style = "width:150px" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.Address.PostalCode, new { @maxlength ="5",id = "PostalCode" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class=" input-prepend">

                        <div class="span2">
                            @Html.LabelFor(model => model.TelephoneNumber, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.TelephoneNumber, new { maxlength = 10 })
                        </div>

                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.ContactPerson, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.ContactPerson,new  {@maxlength ="30"})
                        </div>
                    </div>
                </div>


                <div class="row">
                    <div style="margin-left: 33px">
                        <div class="span2 offset8">
                            <input type="submit" value="Save" class="btn btn-primary" style="width: 100px" />
                        </div>
                        <div class="span1">
                            <a href='@Url.Action("Index")' id="confirm" class="btn btn-danger" style="width: 70px; margin-left: -45px">Cancel</a>
                        </div>
                    </div>
                </div>

            </div>
        }

    </div>

</div>

<script type="text/javascript">

    function GetCities() {
        var clusterId = $("#ClusterId").val();
        return { provinceId: clusterId };
    }


    $("#confirm").easyconfirm({ locale: { title: 'Confirm', button: ['No', 'Yes'], text: 'Cash Centre record is not yet Saved. Do you want to continue?' } });

    $(document).ready(function () {
        $('#trCoordinates').hide();
        $('#trloading').hide();
        $('#PostalCode').focusout(function () {
            //GetCoordinates();
        });
        $('#AddressLine1').focusout(function () {
            //GetCoordinates();
        });
        $('#AddessLine2').focusout(function () {
            //GetCoordinates();
        });
        $('#AddressLine3').focusout(function () {
            //GetCoordinates();
        });
    });

    function GetCoordinates() {

        if ($('#AddressLine1').val().length > 0) {
            if ($('#PostalCode').val().length > 3) {
                $('#trloading').show();
                $('#trCoordinates').hide();

                AjaxCall('@Url.Action("GetCoordinates")', GotCoordinates, Error, { 'address': $('#AddressLine1').val() + "," + $('#AddressLine2').val() + "," + $('#AddressLine3').val() + "," + $('#PostalCode').val() }, 'GET');
            } else {
                //ShowAlert('error', 'Postal Code is invalid', 'Error');

            }
        } else {
            ShowAlert('error', 'Address line 1 required', 'Error');
            //$('#AddressLine1').focus();
        }
    }

    function Error() {
        $('#trloading').hide();
    }

    function GotCoordinates(data) {
        $('#Latitude').val(data.Lat);
        $('#Longitude').val(data.Lng);
        $('#trCoordinates').show();
        $('#trloading').hide();
    }
</script>

@*<tr id="trloading">
        <td colspan="4" style="vertical-align: middle">

            <img src="~/Content/Images/ajax-loader.gif"/>
            <span>Getting GPS coordinates......</span>

        </td>
    </tr>*@