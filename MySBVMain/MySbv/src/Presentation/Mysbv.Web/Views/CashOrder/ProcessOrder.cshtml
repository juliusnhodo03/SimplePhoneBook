

@using System.Web.Optimization
@model Application.Dto.CashOrder.CashOrderDto

@{
    ViewBag.Title = "Process Order";
	Layout = "~/Views/Shared/_Layout.cshtml";
}


<link href="~/Content/KendoUI/kendo.default.min.css" rel="stylesheet" />
<link href="~/Content/KendoUI/kendo.common.min.css" rel="stylesheet" />
<script src="~/Scripts/CashOrdering.Screen.Layout.js"> </script>
<script src="~/Scripts/CashOrdering.Model.js"></script>
<script src="~/Scripts/KendoUI/kendo.aspnetmvc.min.js"></script>
<script src="~/Scripts/KendoUI/kendo.web.min.js"></script>


@*
    Removes the Close (x) icon on pop up
*@
<style type="text/css">
    .k-link {
        min-width: 25px !important;
    }

    .k-window-action {
        visibility: hidden;
    }

    #cssmenu {
        width: 1139px !important;
    }
</style>

@Html.HiddenFor(o => o.CashOrderType.Name, new { id = "hdCashOrderTypeName" })

<div class="well" id="CashOrderContainer" style="width: 1100px !important">

    <div class="ui-widget-header" style="width: 1100px !important">
        <h4 style="margin-left: 5px">Process Cash Order</h4>
    </div>

    <div class="ui-widget-content" style="padding: 5px; width: 1090px !important">
        @if (!ViewBag.IsLoaded)
        {
            if (Model.UserTypeId != null)
            {
                using (Html.BeginForm())
                {
                    
                    @Html.ValidationSummary(true)
            
                    <table style="margin-left: 80px!important; height: 30px!important;">
                        <tr>
                            <td style="width:100px; vertical-align: central;">Search By:</td>
                            <td>
                                @if (Model.IsSerialNumber)
                                {
                                    <input type="radio"
                                           checked="checked"
                                           id="serialNumberSearch"
                                           name="searchRadioGroup" /> <span> Seal/Serial Number &nbsp; &nbsp; &nbsp; &nbsp;</span>

                                    <input type="radio"
                                            id="ReferenceNumberSearch"
                                            name="searchRadioGroup" /> <span>Order Reference</span>
                                }
                                else
                                {
                                    <input type="radio"
                                           id="serialNumberSearch"
                                           name="searchRadioGroup" /> <span> Seal/Serial Number &nbsp; &nbsp; &nbsp; &nbsp;</span>

                                    <input type="radio"
                                           checked="checked"
                                           id="ReferenceNumberSearch"
                                           name="searchRadioGroup" /> <span>Order Reference</span>
                                }
                            </td>
                        </tr>
                    </table>
                     

                    <div class="container" id="SealSerialNumber">
                        <div class="row">
                            <div class="input-prepend">
                                <div class="span5">
                                    @Html.TextBoxFor(a => a.SealSerialNumber, new { @class = "tbstyle", @style = "width:350px" })
                                    @Html.ValidationMessageFor(a => a.SealSerialNumber)
                                </div>
                                <div class="span2">
                                    <input type="submit" value="Submit" class="btn" style="width: 100px; margin-left: -10px" />
                                </div>
                            </div>
                        </div>
                    </div>

                   @Html.HiddenFor(o => o.IsSerialNumber, new { id = "hdSearchSerial" })
                }
            }
            else
            {
                <h4 style="color: red">
                    The current logged in user has no profile. Make sure you are not making use of SBVAdmin Account when working on MySBV.
                    This Account is only there for the development team. Thank you.
                </h4>
            }
        }
        else
        {

            switch (Model.CashOrderType.Name)
            {
                case "Cash for Cash":
                    ViewBag.Title = "Process Cash for Cash Order";
                    @Html.Partial("CashForCashExchangeOrderPartial", Model)
                    break;
                case "EFT":
                    ViewBag.Title = "Process EFT Order";
                    @Html.Partial("EftCashOrderPartial", Model)
                    break;
                default:
                    break;
            }
        }
    </div>
</div>

@section Scripts {
    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/themes/base/css")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
}


<script id="ValidationWindow" type="text/x-kendo-template">
	<div style="margin-left:20px;">
		<span class="headerTitle" />
		<span style="margin-left:5px;" class="confirmation-message"></span>
	</div>

	<div style="margin-left:160px; margin-top:5px;">
		<button id="btnConfirmCancel" class="no-cancel k-button" style="width:80px">Ok</button>
	</div>
</script>


<script id="ConfirmWindow" type="text/x-kendo-template">
	<div style="margin-left:20px;">
		<img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
		<br />
		<p style="margin-left:5px;" class="confirmation-message"></p>
	</div>

	<div style="margin-left:160px; margin-top:5px;">
		<button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
		<button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
	</div>
</script>


<script id="DeleteContainermWindow" type="text/x-kendo-template">
	<div style="margin-left:20px;">
		<img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
		<br />
		<p style="margin-left:5px;" class="confirmation-message"></p>
	</div>

	<div style="margin-left:160px; margin-top:5px;">
		<button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
		<button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
	</div>
</script>


<script id="loadingWindow" type="text/x-kendo-template">
	<div style="margin-left:20px; margin-top:30px;">
		<table>
			<tr>
				<td><img src="@Url.Content("~/Content/Images/loading.gif")" /></td>
				<td style="width:10px;"></td>
				<td><span class="confirmation-message"></span></td>
			</tr>
		</table>
	</div>

	<div style="margin-left:160px; margin-top:5px;">
		<button id="btnConfirmCancel" class="confirm-cancel" style="width:80px; visibility:hidden">Yes</button>
	</div>
</script>



<script id="MessageWindow" type="text/x-kendo-template">
	<div style="margin-left:20px;">
		<img src="@Url.Content("~/Content/Images/infoimg.jpg")" class="imager" style="float:left" />
		<br />
		<p style="margin-left:5px;" class="confirmation-message"></p>
	</div>

	<div style="margin-left:160px; margin-top:15px;">
		<button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Ok</button>
	</div>
</script>








<script>

    $("#serialNumberSearch").click(function () {
        var isChecked = $(this).is(":checked");
        if (isChecked) {
            $("#hdSearchSerial").val(isChecked);
        }
    });

    $("#ReferenceNumberSearch").click(function () {
        var isChecked = $(this).is(":checked");

        if (isChecked) {
            $("#hdSearchSerial").val(false);
        }
    });


    function exitOrder() {
        var kendoWindow = $("<div />").kendoWindow({
            title: "Cash Order Processing",
            resizable: false,
            modal: true,
            width: 430,
            height: 160
        });

        kendoWindow.data("kendoWindow")
            .content($("#ConfirmWindow").html())
            .center().open();

        $(".confirmation-message").html("Are you sure that you want to cancel this cash order processing task? ");

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                if ($(this).hasClass("confirm-cancel")) {
                    window.location.href = '@Url.Action("ProcessOrder")';
                }

                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }





    function completeOrderConfirmation() {
        var kendoWindow = $("<div />").kendoWindow({
            title: "Cash Order Processing",
            resizable: false,
            modal: true,
            width: 430,
            height: 160
        });

        kendoWindow.data("kendoWindow")
            .content($("#ConfirmWindow").html())
            .center().open();

        $(".confirmation-message").html("Are you sure that you want to complete this cash ordering task? ");

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                if ($(this).hasClass("confirm-cancel")) {
                    processCashOrder('@Url.Action("Process")', '@Url.Action("ProcessOrder")', '@Url.Action("GenerateCashOrderProcessingSlip")');
                }

                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }




    $("#textCount").on("keyup", function() {
        var parent = $(this).closest("tr");
        var count = $(this);

        if ($.trim(count.val()) == '') {
            $(this).val("");
        }

        var value = parent.find("#textValue");
        var denomination = parseFloat($.trim(parent.find("#hdValueInCents").val())) / 100.0;;


        var number = (isNumber($.trim($(this).val())) == false) ? 0 : $(this).val();
        var countVal = parseFloat(number) * 10;

        if (countVal % 10 > 0) {
            warningMessageBox("Please enter a whole number as denomination count");
            value.val("");
            count.val("");
        }


        if (parseFloat(number) < 0) {
            warningMessageBox("Value of count must be a positive number.");
            $.trim($(this).val(''));
        }


        var total = parseFloat(number) * parseFloat(denomination);
        value.val(total.toFixed(2));

        CalculateSubtotalTotal(parent);

        if (isNumber($.trim($(this).val())) == false) {
            value.val("");
            $(this).val("");
            return;
        }
    });





    $("#textValue").on("blur", function () {
        var parent = $(this).closest("tr");
        var amount = $.trim($(this).val());

        if ($.trim(amount) == '') {
            $(this).val("");
            amount = "0.00";
        }

        var count = parent.find("#textCount");
        var denomination = parseFloat($.trim(parent.find("#hdValueInCents").val())) / 100.0;;
        var denominationName = $.trim(parent.find(".denomination-width").text());


        var remainder = (parseFloat(amount) * 100) % (denomination * 100);

        if (remainder > 0) {
            warningMessageBox("The amount entered is not a multiple of " + denominationName);
            $.trim($(this).val(''));
            amount = "0.00";
        }

        //if (amount > 1000000) {
        //	warningMessageBox("Maximum amount for all Notes is 1 Million");
        //	$.trim($(this).val(''));
        //	amount = "0.00";
        //}


        if (amount < 0) {
            warningMessageBox("Value of money must be a positive number.");
            $.trim($(this).val(''));
            amount = "0.00";
        }

        var total = (parseFloat(amount * 100) / parseFloat(denomination * 100));
        count.val(total);

        CalculateSubtotalTotal(parent);

        if (isNumber($.trim($(this).val())) == false) {
            count.val("");
            $(this).val("");
            return;
        }
        $(this).val(parseFloat($(this).val()).toFixed(2));
    });





    function CalculateSubtotalTotal(row) {
        var table = row.closest("table");
        var total = 0;

        var noteValues = table.find(".notesClass .textValue");

        noteValues.each(function () {
            if (isNumeric($(this).val())) {
                total += parseFloat($(this).val());
            }
        });
        table.find("#NotesVerifiedSubTotal, #NotesPackedSubTotal").text(total.toFixed(2));


        var coinValues = table.find(".coinsClass .textValue");
        total = 0;
        coinValues.each(function () {
            if (isNumeric($(this).val())) {
                total += parseFloat($(this).val());
            }
        });
        table.find("#CoinsVerifiedSubTotal, #CoinsPackededSubTotal").text(total.toFixed(2));

        CalculateGrandTotal(table);
    }





    function CalculateGrandTotal(table) {
        var total = 0;

        var values = table.find(".textValue");

        values.each(function () {
            if (isNumeric($(this).val())) {
                total += parseFloat($(this).val());
            }
        });
        table.find("#VerifiedGrandTotal, #PackedGrandTotal").text(total.toFixed(2));

        var difference = (parseFloat(table.find("#SubmittedGrandTotal, #OrderedGrandTotal").text()) - total).toFixed(2);
        table.find("#VerifiedGrandTotalsDifference, #PackedGrandTotalsDifference").text(difference);
    }




    $('button[name="btnComplete"]').on("click", function () {
        var verifiedGrandTotal = $("#VerifiedGrandTotal").text();
        var packedGrandTotal = $("#PackedGrandTotal").text();
        var orderedGrandTotal = $("#OrderedGrandTotal").text();

        if (parseFloat(verifiedGrandTotal) == 0) {
            warningMessageBox("Please verify Cash Submitted details");
            return false;
        }

        if (parseFloat(packedGrandTotal) == 0) {
            warningMessageBox("Please enter Cash Packed details");
            return false;
        }

        if ($("#hdCashOrderTypeName").val() != "EFT") {
            if (parseFloat(verifiedGrandTotal) != parseFloat(packedGrandTotal)) {
                warningMessageBox("Verified Cash details not tallying with Cash Packed details");
                return false;
            }
        }
        else {
            if (parseFloat(orderedGrandTotal) != parseFloat(packedGrandTotal)) {
                warningMessageBox("Ordered Cash details not tallying with Cash Packed details");
                return false;
            }
        }
        completeOrderConfirmation();
    });





    function processCashOrder(navigationUrl, listUrl, reportGeneratorUrl) {
        //
        // Container Information
        //
        var container = $("#CashOrderContainer");

        var containerObject =
        {
            CashOrderContainerId: $('#hdCashOrderContainerId').val(),
            Amount: $('#CashOrderAmount').val(),
            VerifiedAmount: 0,
            PackedAmount: 0,
            SerialNumber: $('#ContainerNumberWithCashForExchange').val(),
            CreateDate: $("#CreateDate").val(),
            CreatedById: $("#CreatedById").val(),
            CashOrderContainerDrops: []
        };

        //
        // Container Drops
        //
        var containerDrops = container.find(".CashVerified, .CashPacked");

        containerDrops.each(function () {
            var isCashVerified = $(this).hasClass("CashVerified");
            var dropAmount = 0;

            if (isCashVerified == true) {
                dropAmount = $(this).find("#VerifiedGrandTotal").text();
            }
            else {
                dropAmount = $(this).find("#PackedGrandTotal").text();
            }

            var hdContainerDropId = $(this).find("input[name='hdContainerDropId']").val();

            var containerDropObject =
            {
                CashOrderContainerDropId: hdContainerDropId,
                CashOrderContainerId: containerObject.CashOrderContainerId,
                Amount: parseFloat(dropAmount),
                VerifiedAmount: 0,
                PackedAmount: 0,
                IsCashRequiredInExchange: $(this).hasClass("CashPacked"),
                IsCashForwardedForExchange: $(this).hasClass("CashVerified"),
                CashOrderContainerDropItems: []
            };

            var containerDropItems = $(this).find(".textValue");

            containerDropItems.each(function () {
                var row = $(this).closest("tr");

                var submittedCount = row.find("input[name='textNoteCountSubmitted'], input[name='textCoinCountSubmitted']");
                var submittedValue = row.find("input[name='textNoteValueSubmitted'], input[name='textCoinValueSubmitted']");

                var hdValueInCents = row.find("input[name='hdValueInCents']");
                var verifiedValue = isCashVerified ? $.trim( $(this).val()) : 0;
                var packedValue = isCashVerified ? 0 : $.trim($(this).val());

                var verifiedCount = isCashVerified ? $.trim(row.find(".textCount").val()) : 0;
                var packedCount = isCashVerified ? 0 : $.trim(row.find(".textCount").val());

                var hdContainerDropItemId = row.find("#hdContainerDropItemId").val();

                var value = submittedValue.length == 0 ? 0 : submittedValue.val();
                var count = submittedCount.length == 0 ? 0 : submittedCount.val();
                var valueInCents = hdValueInCents.length == 0 ? 0 : hdValueInCents.val();

                var containerDropItemObject =
                {
                    CashOrderContainerDropItemId: hdContainerDropItemId,
                    CashOrderContainerDropId: containerDropObject.CashOrderContainerDropId,
                    ValueInCents: valueInCents,
                    Count: parseFloat(count),
                    Value: parseFloat(value),
                    VerifiedCount: parseFloat(verifiedCount),
                    VerifiedValue: parseFloat(verifiedValue),
                    PackedCount: parseFloat(packedCount),
                    PackedValue: parseFloat(packedValue)
                };

                //
                // Stack container Drop items.
                //
                if (containerDropItemObject.VerifiedCount > 0 || containerDropItemObject.PackedCount > 0 || containerDropItemObject.Count > 0) {
                    containerDropObject.CashOrderContainerDropItems.push(containerDropItemObject);

                    containerDropObject.VerifiedAmount += parseFloat(verifiedValue);
                    containerDropObject.PackedAmount += parseFloat(packedValue);
                }
            });
            //
            // Stack container Drops.
            //
            containerObject.CashOrderContainerDrops.push(containerDropObject);

            containerObject.VerifiedAmount += parseFloat(containerDropObject.VerifiedAmount);
            containerObject.PackedAmount += parseFloat(containerDropObject.PackedAmount);
        });

        loadingWindow("Please wait...<br>Processing Cash Order");

        var obj = {
            cashOrderContainerDto: containerObject,
            containerNumberWithCashForExchange: $('#ContainerNumberWithCashForExchange').val(),
            emptyContainerOrBagNumber: $('#EmptyContainerOrBagNumber').val()
        };

        //
        // Posting to server

        $.ajax(
        {
            type: "POST",
            url: navigationUrl,
            data: JSON.stringify(obj),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (result) {
                // Call successfull
                if (result.ResponseCode <= 0) {
                    // Close Loading Indicator
                    $("#btnConfirmCancel").click();
                    CashOrderMessage("MessageWindow", "Error Message", "", result.Message, listUrl);
                    $("#btnConfirmCancel").click();
                    //window.location.href = listUrl;
                }
                else {

                    if (result.CashOrder.IsProcessed == true) {
                        //window.location.href = reportGeneratorUrl + "/?id=" + result.CashOrder.CashOrderId;
                    }
                    else {
                        // Close Loading Indicator
                        $("#btnConfirmCancel").click();
                        CashOrderMessage("MessageWindow", "Cash Order", "", result.Message, listUrl);
                        //window.location.href = listUrl;
                    }
                }

            },
            error: function (result) {
                CashOrderMessage("MessageWindow", "Error Message", "", "Error Processing CashOrder! Please see Administrator", listUrl);
                $("#btnConfirmCancel").click();
                window.location.href = listUrl;
            }
        });
        return false;
    }




    function isNumeric(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }




    function warningMessageBox(message) {
        var kendoWindow = $("<div />").kendoWindow({
            title: "Cash Order Processing",
            resizable: false,
            modal: true,
            width: 400,
            height: 150
        });

        kendoWindow.data("kendoWindow")
            .content($("#MessageWindow").html())
            .center().open();

        $(".confirmation-message").html(message);

        kendoWindow
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                kendoWindow.data("kendoWindow").close();
            })
            .end();
    }





    function showLoadingBox(windowId, message) {
        kendoWindowLoader.data("kendoWindow")
            .content($("#" + windowId).html())
            .center().open();
        $(".confirmation-message").html(message);

        kendoWindowLoader
            .find(".no-cancel,.confirm-cancel")
            .click(function () {
                kendoWindowLoader.data("kendoWindow").close();
            })
            .end();
    }


    function loadingWindow(message) {
        var windowId = "loadingWindow";
        showLoadingBox(windowId, message);
        $("#loadingWindow").find(".k-window-action").css("visibility", "hidden");
    }


</script>



<style type="text/css">
	.ProcessOrderHeader {
		width: 445px;
	}

	.denomination-width {
		width: 30px !important;
	}

	.bold {
		font-weight: bold;
	}

	.denominations {
		width: 100% !important;
	}

		.denominations tr {
			border-top: solid 1px grey;
			border-bottom: solid 1px grey;
		}

			.denominations tr:first-child {
				border-top: none;
				border-bottom: solid 1px grey;
			}

			.denominations tr:last-child {
				border-bottom: none;
			}

			.denominations tr td:first-child {
				border-left: none;
				padding: 0;
			}

			.denominations tr td:last-child {
				border-right: none;
				padding: 0px;
			}

			.denominations tr td {
				border-left: solid 1px grey;
				padding: 0;
			}

	caption {
		border: solid 1px black;
	}

	.cashCenterView {
		border: 1px solid #000;
		padding: 10px;
	}

	.OrangeShade {
		background: #FFC48E;
	}

	.GreenShade {
		background: #DEF3BD;
	}

	.CenterHeader {
		border: 1px solid;
		border-bottom: 0;
		padding: 10px;
		text-align: center;
		font-size: 12pt;
	}

	.border1px {
		border: 1px solid;
		padding: 0;
	}

	.k-limit {
		width: 434px !important;
	}

	.CashVerified, .CashForwardedContainerDrop,
	.CashPacked, .coinsClass, .notesClass {
		padding: 0;
	}

	.textbox-green {
		border-color: #DEF3BD !important;
		background: #DEF3BD !important;
		width: 105px !important;
		height: 15px !important;
	}

	.content-wrapper {
		margin: 0 auto;
		max-width: 1000px !important;
	}


	.textbox-count-green {
		border-color: #DEF3BD !important;
		background: #DEF3BD !important;
		width: 60px !important;
		height: 15px !important;
	}

	.textbox-orange {
		border-color: #FFC48E !important;
		background: #FFC48E !important;
		width: 105px !important;
		height: 15px !important;
	}


	.textbox-count-orange {
		border-color: #FFC48E !important;
		background: #FFC48E !important;
		width: 60px !important;
		height: 15px !important;
	}

	.textbox-green:focus, .textbox-count-green:focus {
		background: #fff !important;
	}

	.denominations tr td {
		padding: 0 !important;
		height: 10px !important;
	}


	.k-window-action {
		visibility: hidden !important;
	}
</style>