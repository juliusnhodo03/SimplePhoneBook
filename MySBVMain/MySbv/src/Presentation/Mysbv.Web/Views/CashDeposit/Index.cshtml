@using Application.Dto.CashDeposit
@using Kendo.Mvc.UI
@model IEnumerable<ListCashDepositDto>

@{
    ViewBag.Title = "List Cash Deposits";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .k-link {
        min-width: 25px !important;
    }

    .k-window-action {
        visibility: hidden;
    }


	.width-placeholder {
		width: 1000px !important;
	}
	
	.content-wrapper, #cssmenu {
		width: 1040px !important;
	}
</style>

<script src="~/Scripts/cash.deposit.model.js"> </script>
<script type="text/javascript" src="~/Scripts/ModalPopups.js"> </script>

<div class="well width-placeholder">
	<div class="ui-widget-header">
		<h4 style="margin-left: 5px">Cash Deposits</h4>
	</div>
	<div class="ui-widget-content" style="padding: 5px;">

		<span style="color: red; font-weight: bold;">
			<ul>
				<li>@ViewBag.HasTriedToEditSubmittedDeposit</li>
			</ul>
		</span>

		@if (ViewBag.IsValidUser == true)
		{
			<div class="row">
				<a style="margin-left: 20px; margin-bottom: 15px;" class="btn" href="@Url.Action("Create")"><strong> &nbsp; &nbsp; Add New Cash Deposit &nbsp; &nbsp;</strong></a>
			</div>

			@(Html.Kendo().Grid(Model)
				  .Name("Grid")
				  .Columns(columns =>
				  {
					  columns.Bound(e => e.TransactionReference).Width(10);
					  columns.Bound(e => e.CashDepositType).Width(20);
					  columns.Bound(e => e.SiteName).Width(20);
					  columns.Bound(e => e.BankAccount).Width(20);
					  columns.Bound(e => e.TotalDepositAmount).Width(20);
					  columns.Bound(e => e.StatusName).Width(20);

					  columns.Template(@<text></text>).ClientTemplate("<a title='View' href='" + Url.Action("View", "CashDeposit") + "/?id=#=CashDepositId#'><img src='" + @Url.Content("~/Content/Images/grid_images/view.png") + "'/></a>").HtmlAttributes(new { @style = "text-align: center;" });
					  columns.Template(@<text></text>).ClientTemplate("<a title='Edit' href='" + Url.Action("Edit", "CashDeposit") + "/?id=#=CashDepositId#'><img src='" + @Url.Content("~/Content/Images/grid_images/edit.png") + "'/></a>").HtmlAttributes(new { @style = "text-align: center" });
					  columns.Template(@<text></text>).ClientTemplate("<a title='Submit' href='javascript:OnSubmitCashDeposit(#=CashDepositId#, $(this))'><img src='" + @Url.Content("~/Content/Images/grid_images/submit.png") + "'/></a>").HtmlAttributes(new { @style = "text-align: center" });
					  columns.Template(@<text></text>).ClientTemplate("<a title='Copy' href='" + Url.Action("Copy", "CashDeposit") + "/?id=#=CashDepositId#'><img src='" + @Url.Content("~/Content/Images/grid_images/copy.png") + "'/></a>").HtmlAttributes(new { @style = "text-align: center" });
					  columns.Template(@<text></text>).ClientTemplate("<a title='Delete' href='javascript:DeleteDeposit(#=CashDepositId#)'><img src='" + @Url.Content("~/Content/Images/grid_images/Delete.png") + "'/></a>").HtmlAttributes(new { @style = "text-align: center" });
                  })
                  .HtmlAttributes(new { style = "" })
                  .ClientDetailTemplateId("template")
                  .Sortable()
                  .Pageable(page => page.ButtonCount(5))
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .PageSize(5)
                      .Read(read => read.Action("Deposits", "CashDeposit"))
                  )
                  .Events(events => events.DataBound("dataBound"))
                  .Filterable(filterable => filterable
                      .Extra(false)
                      .Operators(operators => operators
                          .ForString(str => str.Clear()
                              .StartsWith("Starts with")
                              .IsEqualTo("Is equal to")
                              .IsNotEqualTo("Is not equal to")
                              .Contains("Contains")
                          ))
                  )
                  .ToolBar(toolbar =>
                  {
                      toolbar.Template(@<text>

						<table class="serach-toolbar">
							<tr>
								<td>Search</td>
								<td>
									@(Html.Kendo().AutoComplete()
															  .Name("SearchInput")
															  .Filter("startswith")
															  .MinLength(1)
															  .HtmlAttributes(new { style = "width:350px" })
															  .DataSource(source =>
															  {
																  source.Read(read =>
																  {
																	  read.Action("AutoCompleteCashDepositsByColumn", "CashDeposit").Data("onAdditionalData");
																  }).ServerFiltering(true);
															  })
									)

								</td>

								<td><label class="category-label" for="category">Filter</label></td>
								<td>
									<div class="toolbar">
										@(Html.Kendo().DropDownList()
																  .Name("ddlFilterBy")
																  .OptionLabel("All")
																  .DataTextField("Name")
																  .DataValueField("Tag")
																  .AutoBind(false)
																  .HtmlAttributes(new { @style = "width:200px !important;" })
																  .DataSource(ds => ds.Read("CashDepositsColumnsListingToolbarTemplate", "CashDeposit")))
									</div>
								</td>
								<td>
									<span id="gap" class="gap">
										<a class="btn" id="RebindGrid"><strong>Search</strong></a>
									</span>
								</td>
							</tr>
						</table>
					</text>);
				  })
			)

			<script>
				function dataBound() {
					this.collapseRow(this.tbody.find("tr.k-master-row").first());
				}
			</script>

			<script id="template" type="text/kendo-tmpl">

				@(Html.Kendo().Grid<ContainerDto>()
						  .Name("grid_2_#=CashDepositId#")
						  .Columns(columns =>
						  {
							  columns.Bound(o => o.ReferenceNumber).Width(30);
							  columns.Bound(o => o.ContainerTypeName).Width(30);
							  columns.Bound(o => o.SerialNumber).Width(30);
							  columns.Bound(o => o.Amount).Width(30);
						  })
						  .ClientDetailTemplateId("template-container-drop")
						  .DataSource(dataSource => dataSource
							  .Ajax()
							  .PageSize(5)
							  .Read(read => read.Action("Containers", "CashDeposit", new { id = "#=CashDepositId#" }))
						  )
						  .Pageable()
						  .Sortable()
						  .ToClientTemplate())

			</script>


			<style type="text/css">
				.td-3rd-level-grid tr td {
					border: none !important;
				}
			</style>
			<script id="template-container-drop" type="text/kendo-tmpl">

				@(Html.Kendo().Grid<ContainerDropDto>().TableHtmlAttributes(new { @class = "td-3rd-level-grid" })
						  .Name("grid3#=ContainerId#")
						  .Columns(columns =>
						  {
							  columns.Bound(o => o.ReferenceNumber).Width(30);
							  columns.Bound(o => o.Narrative).Width(30);
							  columns.Bound(o => o.BagSerialNumber).Width(30);
							  columns.Bound(o => o.Amount).Width(30);
							  columns.Bound(o => o.Name);
							  columns.Bound(o => o.ContainerDropId).Hidden();

							  columns.Template(@<text></text>).HtmlAttributes(new { @class = "delete" }).ClientTemplate("#=checkDepositType(data)#");
						  })
					  .DataSource(dataSource => dataSource
						  .Ajax()
						  .PageSize(100)
						  .Read(read => read.Action("ContainerDrops", "CashDeposit", new { id = "#=ContainerId#" }))
					  )
					  .Events(events => events.DataBound("dataBound"))
					  .ToClientTemplate()
				)
			</script>
		}
		else
		{
			<h4 style="color: red">
				The current logged in user has no profile. Make sure you are not making use of SBVAdmin Account when working on MySBV.
				This Account is only there for the development team. Thank you.
			</h4>
		}
	</div>
</div>



<script id="delete-confirmation" type="text/x-kendo-template">
    <div>
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <p style="margin-left:5px;" class="delete-message"> &nbsp;Do you want to delete the Cash Deposit?</p></td>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button class="delete-confirm k-button" style="width:80px">Yes</button>
        <button class="delete-cancel k-button" style="width:80px">No</button>
    </div>
</script>

<script id="ConfirmWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
        <button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
    </div>
</script>

<script id="loadingWindow" type="text/x-kendo-template">
    <div style="margin-left:20px; margin-top:30px;">
        <table>
            <tr>
                <td><img src="@Url.Content("~/Content/Images/loading.gif")" /></td>
                <td style="width:10px;"></td>
                <td><span class="confirmation-message"></span></td>
            </tr>
        </table>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel" style="width:80px; visibility:hidden">Yes</button>
    </div>
</script>

<script id="MessageWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/infoimg.jpg")" class="imager" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:15px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Ok</button>
    </div>
</script>

<a class="hide" id="btnDepositSlip" href="@Url.Action("DepositSlip", "CashDeposit")" target="_blank">DepositSlip</a>


<form class="hide" method="POST" action="@Url.Action("Delete", "CashDeposit")">
	<input type="submit" id="btnDeleteCashDeposit" value="delete" />
</form>

<script type="text/javascript">
 
	var isRetailUser = '@ViewBag.IsRetailUser';
	var isSBVTeller = '@ViewBag.IsSBVTeller';
	var isSBVAdmin = '@ViewBag.IsSBVAdmin';

	function checkDepositType(data) {

		if (data.DepositType != "Single Deposit") {

			var imageUrl = '@Url.Content("~/Content/Images/grid_images/Delete.png")';

			var image = "<img src='" + imageUrl + "'/>";
			var action = "javascript:DeleteDrop(#=ContainerDropId#)";

			var html = kendo.format("<a href='{0}'>{1}</a>",
				action, image
			);
			return html;
		}
		return "";
	}


	function DeleteDeposit(depositId) {

		if (isRetailUser == "true" || isSBVTeller == "true" || isSBVAdmin == "true") {
			var url = '@Url.Action("Cancel")/?id=' + depositId;
			ExecDelete(url);
		}
		else {
			$("#btnDeleteCashDeposit").click();
		}
	}


	function DeleteDrop(dropId) {
		if (isRetailUser == "true" || isSBVTeller == "true" || isSBVAdmin == "true") {
			var url = '@Url.Action("CancelDrop")/?id=' + dropId;
			ExecDelete(url);
		}
		else {
			$("#btnDeleteCashDeposit").click();
		}
	}

	function ExecDelete(url) {

		var kendoWindow = $("<div />").kendoWindow({
			title: "Confirm Delete",
			resizable: false,
			modal: true,
			width: "500px",
			height: "200px"
		});

		kendoWindow.data("kendoWindow")
			.content($("#delete-confirmation").html())
			.center().open();

		kendoWindow
			.find(".delete-confirm,.delete-cancel")
			.click(function () {
				if ($(this).hasClass("delete-confirm")) {
					execute(url);
				}
				kendoWindow.data("kendoWindow").close();
			})
			.end();
	}

	function execute(url) {
		$.post(url, function (data) {
			window.location.href = '@Url.Action("Index")';
		});

	}

	$("#RebindGrid").click(function () {
		refreshGrid();
	});

	function refreshGrid() {
		var columnName = $("#ddlFilterBy").val();
		var searchValue = $.trim($("#SearchInput").val());

		searchValue = (searchValue == "") ? "________" : searchValue;

		var grid = $("#Grid").data("kendoGrid");

		if (columnName) {
			grid.dataSource.filter({ field: columnName, operator: "contains", value: searchValue });
		} else {
			grid.dataSource.filter({});
		}
	}

	$("#ddlFilterBy").change(function () {

		$("#SearchInput").kendoAutoComplete({
			dataTextField: $(this).val()
		});

		$("#SearchInput").css("width", "350px");

		$("#SearchInput").val("");

		if ($(this).val() == "") {
			refreshGrid();
		}

		$("#SearchInput").val("");
	});

	function onAdditionalData() {
		return {
			columName: $("#ddlFilterBy").val(),
			searchData: $("#SearchInput").val()
		};
	}

</script>

<script type="text/javascript">

	function OnSubmitCashDeposit(cashDepositId) {
		var submitUrl = '@Url.Action("Submit")/' + cashDepositId;
		var windowId = "ConfirmWindow";
		var header = "Submit Deposit";
		var message = "Are you sure you want to submit Cash Deposit?";
		SubmitYesOrNoBox(windowId, header, message, submitUrl, cashDepositId);
	}

	function SubmitYesOrNoBox(windowId, header, message, submitUrl, cashDepositId) {
		var kendoWindow = $("<div />").kendoWindow({
			title: header,
			resizable: false,
			modal: true,
			width: 450,
			height: 180
		});

		kendoWindow.data("kendoWindow")
			.content($("#" + windowId).html())
			.center().open();

		$(".confirmation-message").html(message);

		kendoWindow
			.find(".no-cancel,.confirm-cancel")
			.click(function () {
				if ($(this).hasClass("confirm-cancel")) {
					$("#btnExitToIndex").click();
					loadingWindow("Please wait...<br/>Submitting Cash deposit.");

					window.location.href = submitUrl;
				}

				kendoWindow.data("kendoWindow").close();
			})
			.end();
	}

	function showSubmitLoadingBox(windowId, message) {
		kendoWindowLoader.data("kendoWindow")
			.content($("#" + windowId).html())
			.center().open();
		$(".confirmation-message").html(message);

		kendoWindowLoader
			.find(".no-cancel,.confirm-cancel")
			.click(function () {
				$("#btnConfirmCancel").click();
				kendoWindowLoader.data("kendoWindow").close();
			})
			.end();
	}

	//document ready
	$(document).ready(function () {
		var isSubmitted = '@TempData["IsSubmitted"]';
		var cashDepositId = '@TempData["CashDepositId"]';

		if (isSubmitted == 'True' || isSubmitted == 'true' || isSubmitted == true) {

			var depositSlipUrl = '@Url.Action("DepositSlip")/?cashDepositSlipId=' + cashDepositId;
			window.open(depositSlipUrl, '_blank');

			var transactionSummaryUrl = '@Url.Action("TransactionSummary")/?transactionSummaryId=' + cashDepositId;
			window.open(transactionSummaryUrl, '_blank');
		}
	});

</script>

@using (@Html.BeginForm("DepositSlip", "CashDeposit", FormMethod.Post, new { target = "_blank", name = "DepositSlipForm", id = "DepositSlipForm" }))
{
    @Html.Hidden("cashDepositSlipId", new { id = "cashDepositSlipId", name = "cashDepositSlipId" })
}

@using (@Html.BeginForm("TransactionSummary", "CashDeposit", FormMethod.Post, new { target = "_blank", name = "TransactionSummaryForm", id = "TransactionSummaryForm" }))
{
    @Html.Hidden("transactionSummaryId", new { id = "transactionSummaryId", name = "transactionSummaryId" })
}
