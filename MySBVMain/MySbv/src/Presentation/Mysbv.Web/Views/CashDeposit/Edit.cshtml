@using System.Text
@using Kendo.Mvc.UI

@model Application.Dto.CashDeposit.CashDepositDto

@{
    ViewBag.Title = "Edit Cash Deposit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/cash.deposit.model.js"> </script>
@*<script src="~/Scripts/cashdeposit.submitdrop.js"></script>*@
<script src="~/Scripts/cash.deposit.screen.layout.js"> </script>

<style type="text/css">
    .k-window-action {
        visibility: hidden;
    }

    caption {
        background: #f5f5f5;
        padding-right: 15px;
        border-radius: 3px;
        border: solid 1px ButtonFace;
    }
</style>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.InitialCitSerialNumber, new { id = "hdInitialCitSerialNumber" })
    @Html.HiddenFor(model => model.TransactionReference, new { id = "hdTransactionReferenceNumber" })

    @Html.HiddenFor(model => model.CashDepositId, new { id = "hdCashDepositId", @style = "top:0; position:absolute;" })
    @Html.HiddenFor(model => model.SiteId, new { id = "hdSiteId" })
    
    @Html.DropDownList("ddlGlobalContainerTypes", ViewData["ContainerTypes"] as SelectList, new { id = "ddlGlobalContainerTypes", style = "position:absolute; top:0; visibility:hidden" })
	
	@Html.HiddenFor(m => m.CreateDate, new { id = "hdCreateDate", name = "hdCreateDate" })
	@Html.HiddenFor(m => m.CreatedById, new { id = "hdCreatedById", name = "hdCreatedById" })
    
    <div class="well">
        <div class="deposit-wrapper0">
            <div id="inner_main_container0" style="padding-bottom:25px;">
                <!-- Edit Cash Deposit -->

                <div class="ui-widget-header">
                    <h4 style="margin-left: 5px">Edit Cash Deposit</h4>
                </div>

                <div class="ui-widget-content" style="padding: 5px;">

					<div class="row">
						<div class="input-prepend">
							<div class="span3">
								@Html.LabelFor(model => model.MerchantId, new { @class = "label", style = "width: 205px" })
							</div>
							<div class="span2">
								@Html.DropDownList("ddlMerchants", ViewData["Merchants"] as SelectList,
									new { @disabled = "disabled", @style = "width:225px; margin-bottom: 8px; margin-left: -15px" })
								)
							</div>
							<div class="span3 offset1">
								@Html.LabelFor(model => model.SiteId, new { @class = "label", style = "width: 205px" })
							</div>
							<div class="span2">
								@Html.DropDownList("ddlSiteSbvUser", ViewData["Sites"] as SelectList,
									new { @disabled = "disabled", @style = "width:175px; margin-bottom: 8px; margin-left: -15px" })
							</div>
						</div>
					</div>


                    <div class="row">
                        <div>
                            <div class="span3">
                                @Html.LabelFor(model => model.BankId, new { @class = "label", style = "width: 205px" })
                            </div>
                            <div class="span2">
                                @Html.DropDownList("ddlBank", ViewData["Banks"] as SelectList,
                                new { @disabled = "disabled", id = "ddlBank", @style = "width:225px; margin-bottom: 8px; margin-left: -15px" })
                            </div>

                            <div class="span3 offset1">
                                @Html.LabelFor(model => model.AccountId, new { @class = "label", style = "width: 205px" })
                            </div>

                            <div class="span2">
                                @Html.DropDownList("ddlSiteSettlementAccount", ViewData["SiteSettlementAccounts"] as SelectList,
                                new { @disabled = "disabled", id = "ddlSiteSettlementAccount", @style = "width:175px; margin-bottom: 8px; margin-left: -15px" })
                            </div>
                        </div>
                    </div>
                    <br/>

                    <div>
                        <div class="row">
                            <div class="input-prepend">
                                <div class="span3">
                                    @Html.LabelFor(model => model.DepositTypeId, new { @class = "add-on", style = "width: 205px" })
                                </div>
                                <div class="span2">
                                    @Html.DropDownListFor(model => model.DepositTypeId, ViewData["DepositTypes"] as SelectList, 
                                        new { id = "ddlDepositType", @style = "width:225px; margin-bottom: 8px; margin-left: -15px", @disabled = "disabled" })
                                </div>

                                <div class="span3 offset1">
                                    @Html.LabelFor(model => model.CitCode, new { @class = "add-on", style = "width: 205px" })
                                </div>
                                <div class="span2">
                                    @Html.TextBoxFor(model => model.Site.CitCode,
                                    new { @disabled = "disabled", id = "txtCitCode", @style = "width:160px; margin-bottom: 8px; margin-left: -15px" })
                                </div>
                            </div>
                        </div>
                        
                        
                        @if (Model.DepositTypeName == "Multi Deposit")
                        {
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span3">
                                        @Html.LabelFor(model => model.DepositedAmount, new { @class = "add-on", style = "width: 205px" })
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.DepositedAmount, new { id = "txtTotalDepositAmount", @disabled = "disabled", @style = "width:210px; margin-bottom: 8px; margin-left: -15px" })
                                    </div>

                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CaptureDateString, new {@class = "add-on", style = "width: 205px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CaptureDateString, new {@disabled = "disabled", @style = "width:160px; margin-bottom: 8px; margin-left: -15px"})
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span3">
                                        @Html.LabelFor(model => model.Narrative, new { @class = "add-on", style = "width: 205px" })
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.Narrative, new { @disabled = "disabled", id = "txtCustomDepositeRef", @style = "width:210px; margin-bottom: 8px; margin-left: -15px" })                                        
                                    </div>

                                    <div class="span3 offset1">
                                        @Html.LabelFor(model => model.CaptureDateString, new {@class = "add-on", style = "width: 205px"})
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.CaptureDateString, new {@disabled = "disabled", @style = "width:160px; margin-bottom: 8px; margin-left: -15px"})
                                    </div>
                                </div>
                            </div>
                        }
                        
                        
                        @if (Model.DepositTypeName != "Multi Deposit")
                        {
                            <div class="row">
                                <div class="input-prepend">
                                    <div class="span3">
                                        @Html.LabelFor(model => model.DepositedAmount, new { @class = "add-on", style = "width: 205px" })
                                    </div>
                                    <div class="span2">
                                        @Html.TextBoxFor(model => model.DepositedAmount, new { id = "txtTotalDepositAmount", @disabled = "disabled", @style = "width:210px; margin-bottom: 8px; margin-left: -15px" })
                                    </div>

                                    <div class="span3 offset1"></div>
                                    <div class="span2"></div>
                                </div>
                            </div>
                        }

                    </div>
                </div>

                <br />


                <!-- Containers -->
                <div class="ui-widget-header">
                    <h5 style="margin-left: 5px">Containers</h5>
                </div>

                <div id="ContainersHolder" class="ui-widget-content" style="padding: 5px; font-size:10pt !important; ">

                    <div id="container_clone_template" class="bagOrCanister" style="width: 896px !important; margin-top: 5px;">

						<fieldset id="fieldsetContainer" class="sFieldsetContainer" style="background-color: #f5f5f5; border: solid 1px gray; padding-bottom:5px; ">
								<legend>Container Information</legend>

								<div style="padding: 10px;">

									<span style="font-size: 11pt; font-weight: bold;">
										<span class="container_header_text">Container  &nbsp; 1  &nbsp;}</span> &nbsp;&nbsp;&nbsp;&nbsp;Total :&nbsp;
										<span class="container_header_total">560.00</span>
										<a class="containerRemoval"></a>
									</span>

									<table>
										<tr>
											<td style="width: 100px;">Container Type</td>
											<td style="width: 300px;" class="ContainerTypes">
												@Html.DropDownList("ContainerTypes", ViewData["ContainerTypes"] as SelectList,
												new
												{
													id = "ddlContainerType",
													@class = "dropdown"
												})
											</td>
										</tr>
									</table>

									<!-- Listing of Container Attributes -->
									<table class="ClsTableContainerTypes">
										<tr>
											<td>
												<div id="containerAttributesPlaceHolder"></div>
											</td>
										</tr>
									</table>
								</div>


								<div style="border-bottom: solid 1px gray; width: 895px; position: absolute;"></div>
								<br />

								<div style="padding: 7px;">
									<!-- Denomination -->

									<div id="ContainerDrop" class="denomination_groups_parent">
										<table>
											<tr class="drop_level">
												<td>
													<fieldset class="denomination_groups_clone" style="width: 847px !important;">
														<legend name="legend"></legend>


														<table style="width: 95%">
															<tbody class="ContainerDropElements">
																<tr>
																	<td colspan="4">
																		<span class="lblDropTitleAndNumber" style="font-weight: bold">Deposit</span><span class="TotalInDrop">Total : R 0.00</span>
																	</td>
																</tr>
															</tbody>
														</table>

														@Html.Hidden("hdContainerId", "0", new { name = "hdContainerId" })
														@Html.Hidden("hdContainerReferenceNumber", "", new { name = "hdContainerReferenceNumber" })
														@Html.Hidden("hdContainerDropId", "0", new { name = "hdContainerDropId" })
														@Html.Hidden("hdStatusId", 1, new { name = "hdStatusId" })
														@Html.Hidden("hdDropNumber", "1", new { name = "hdDropNumber" })
														@Html.Hidden("hdDropStatusName", "ACTIVE", new { name = "hdDropStatusName" })
														@Html.Hidden("hdDropReferenceNumber", "", new { name = "hdDropReferenceNumber" })

														<table class="denominationgroup">
															<tr class="denominationgroup_clone_row">
																<td>
																	<!-- Note Details -->
																	<div class="CurrencyDenominations">
																		<fieldset id="fieldset2">
																			<legend>Note Details</legend>

																			<table>
																				<caption>
																					<strong>Notes</strong>
																				</caption>
																				<tr>
																					<td>
																						<table style="width: 350px">
																							<tr>
																								<td>Denomination</td>
																								<td style="width: 70px"></td>
																								<td align="right">Count</td>
																								<td style="width: 40px"></td>
																								<td align="right">Value (R)</td>
																							</tr>
																						</table>
																					</td>
																				</tr>

																				<tr>
																					<td class="clsNotessubtotal">
																						<div class="clsnotes">
																							<table class='denominationparent' currencytype="Notes">
																								<tr class="clsline">
																									<td class="last">
																										@Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Notes" })
																										@Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
																									</td>
																									<td>
																										@Html.TextBox("textNoteCount", "", new { id = "textNoteCount", @class = "dropdown denomination", style = "margin-right: 5px" })
																									</td>
																									<td>
																										@Html.TextBox("textNoteValue", "", new { id = "textNoteValue", @class = "sbv_notes_value dropdown denomination" })
																									</td>
																									<td style="width:20px !important;">
																										<a type="button" name="buttonAddNotes" style="height:18px; width:18px;">
																											<img src="~/Content/images/add.png" style="height:18px;" alt="" class="allButtonsBorder" />
																										</a>
																									</td>
																									<td style="height: 16px; visibility: hidden; width: 16px;">
																										<a class="remove" type="button" name="buttonRemoveNotes">
																											<img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" />
																										</a>
																									</td>
																								</tr>
																							</table>
																						</div> <!-- take_notes -->
																						<table>
																							<tr>
																								<td style="text-align: left; width: 120px;">Subtotal</td>
																								<td>
																									@Html.TextBox("textNotesSubtotal", "0.00", new { @class = "SubTotals", @readonly = "readonly" })
																								</td>
																							</tr>
																						</table>
																					</td>
																				</tr>
																			</table>
																		</fieldset>
																	</div>
																</td>


																<td>
																	<!-- Coin Details -->
																	<div class="CurrencyDenominations" action=" " method="post">
																		<fieldset id="fieldset1">
																			<legend>Coin Details</legend>

																			<table>
																				<caption>
																					<strong>Coins</strong>
																				</caption>
																				<tr>
																					<td>
																						<table width="350px">
																							<tr>
																								<td>Denomination</td>
																								<td style="width: 70px"></td>
																								<td align="right">Count</td>
																								<td style="width: 40px"></td>
																								<td align="right">Value (R)</td>
																							</tr>
																						</table>
																					</td>
																				</tr>

																				<tr>
																					<td class="clsCoinssubtotal">
																						<div class="clscoins">
																							<table class='denominationparent' currencytype="Coins">
																								<tr class="clsCoinsline">
																									<td class="last">
																										@Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Coins" })
																										@Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
																									</td>
																									<td>
																										@Html.TextBox("textCoinCount", "", new { id = "textCoinCount", @class = "dropdown denomination", style = "margin-right: 5px" })
																									</td>
																									<td>
																										@Html.TextBox("textCoinValue", "", new { id = "textCoinValue", @class = "sbv_coins_value dropdown denomination", style = "text-align:right" })
																									</td>
																									<td>
																										<a type="button" name="buttonAddCoins">
																											<img src="~/Content/images/add.png" alt="" class="allButtonsBorder" />
																										</a>
																									</td>
																									<td style="height: 16px; width: 16px;">
																										<a class="remove" type="button" name="buttonRemoveCoins" style="visibility: hidden">
																											<img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" />
																										</a>
																									</td>
																								</tr>
																							</table>
																						</div> <!-- take -->
																						<table>
																							<tr>
																								<td style="text-align: left; width: 120px;">Subtotal</td>
																								<td>
																									@Html.TextBox("textCoinsSubtotal", "0.00", new { @class = "SubTotals", @readonly = "readonly" })
																								</td>
																							</tr>
																						</table>
																					</td>
																				</tr>
																			</table>

																		</fieldset>
																	</div>


																	<div class="row" name="IsNotForSingleDeposit">
																		<div class="span8"></div>
																		<div class="span3 offset1">
																			<table style="margin-left: 72px;">
																				<tr>
																					<td><button style="" name="ButtonCopyDrop" class="btn btn-mini" type="button">Copy Drop</button></td>
																					<td style="width:5px"></td>
																					<td><button name="ButtonSubmitDrop" class="btn btn-mini btn-inverse" type="button">Submit</button></td>
																				</tr>
																			</table>

																		</div>
																	</div>

																</td>
															</tr>
														</table>
													</fieldset>
												</td>
												<td class="containerDropRemoval"></td>
											</tr>
										</table>
									</div>

								</div>

								<button style="width:150px !important; margin-left: 7px;" name="ButtonNewContainerDrop" class="btn btn-mini" type="button">Add New Deposit</button>

							</fieldset>


							<table class="garp" style="margin-left: 10px; margin-top: 5px; margin-bottom:10px; ">
								<tr>
									<td align="left">

										<div id="containerbutton">

											<div class="row">
												<div class="span1">
													<button style="margin-left:-10px;" onclick="AddContainer()" class="btn btn-mini btn btn-info" type="button">Add Container</button>
												</div>
												<div class="span2">
													<span id="hideDeleteContainer">
														<button name="btnRemoveContainer" class="btn btn-mini btn-inverse" style="width:100px !important; margin-left:5px;" type="button">Delete Container</button>
													</span>
												</div>
											</div>

										</div>
									</td>
								</tr>
							</table>


</div>
                </div>



                <div id="footerbuttons" class="row pull-right" style="margin-top: 5px; margin-right:-35px">
                    <div class="span1">
                        <button name="Submitted"  style="margin-left: -25px;" class="btn btn-mini btn-inverse" type="button">Submit</button>
                    </div>

                    <div class="span1">
                        <button name="edited" style="margin-left:-10px; font-weight:bold" class="btn btn-mini btn btn-success" type="button">Save</button>
                    </div>

                    <div class="span2">
                        <button onclick ="cancelTransaction('@Url.Action("Index")')" class="btn btn-mini btn-danger" style="width: 100px !important; margin-left: 5px; font-weight: bold" type="button">Cancel</button>
                    </div>

                </div>

            </div> <!--end of main content-->


        </div>

    </div>

}


<!-- =========================================== -->
<!-- the html below is FOR CLONING PURPOSES ONLY -->
<!-- =========================================== -->
<!-- Notes Denomination Clone -->
<table class='outer allnotes'>
    <tr class="clsline">
        <td class="last">
            @Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Notes" })
            @Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
        </td>
        <td>
            @Html.TextBox("textNoteCount", "", new { id = "textNoteCount", @class = "dropdown denomination", style = "margin-right: 5px" })
        </td>
        <td>
            @Html.TextBox("textNoteValue", "", new { id = "textNoteValue", @class = "sbv_notes_value dropdown denomination" })
        </td>
        <td>
            <a type="button" name="buttonAddNotes">
                <img src="~/Content/images/add.png" alt="" class="allButtonsBorder" />
            </a>
        </td>
        <td style="height: 16px; width: 16px;">
            <a class="remove" type="button" name="buttonRemoveNotes">
                <img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" />
            </a>
        </td>
    </tr>
</table>



<!-- Coins Denomination Clone -->
<table class='outer'>
    <tr class="clsCoinsline">
        <td class="last">
            @Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Coins" })
            @Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
        </td>
        <td>
            @Html.TextBox("textCoinCount", "", new { id = "textCoinCount", @class = "dropdown denomination", style = "margin-right: 5px" })
        </td>
        <td>
            @Html.TextBox("textCoinValue", "", new { id = "textCoinValue", @class = "sbv_coins_value dropdown denomination", style = "text-align:right" })
        </td>
        <td>
            <a type="button" name="buttonAddCoins">
                <img src="~/Content/images/add.png" alt="" class="allButtonsBorder" />
            </a>
        </td>
        <td style="height: 16px; width: 16px;">
            <a class="remove" type="button" name="buttonRemoveCoins">
                <img alt="" src='~/Content/images/remove.png' class="allButtonsBorder" />
            </a>
        </td>
    </tr>
</table>




<!-- ContainerDrop Denomination Clone -->
<div class='outer_groups'>
    <table class="outer_groups_clone" name="outer_groups_clone">
        <tr class="drop_level">
            <td>
				<fieldset class="denomination_groups_clone" style="width: 847px !important;">
					<legend name="legend"></legend>

					<table style="min-width:850px">
						<tr>
							<td><span class="lblSerialNumber">Deposit Serial Number</span></td>
							<td class="OnSingleInsertDropDescription">
								@Html.TextBox("txtDropSerialNumber", "", new { @maxlength = 14 })
							</td>
							<td style='padding-right:5px; width:100px;'>
								<span class="lblDropAmount">Drop Amount</span>
							</td>
							<td><input style="width: 215px;" type='text' name='txtDropAmount' maxlength=14 /></td>
						</tr>

						<tr>
							<td><span class="lblDropReference">Deposit Reference</span></td>
							<td>
								@Html.TextBox("txtDropReference", "")
							</td>
							<td style='width:80px; padding-right:10px'>
								<span class='lblDropTitleAndNumber'>Deposit 1</span>
							</td>
							<td><span class='TotalInDrop'>Total : R 0.00</span></td>
						</tr>
					</table>

					@Html.Hidden("hdContainerId", "0", new { name = "hdContainerId" })
					@Html.Hidden("hdContainerReferenceNumber", "", new { name = "hdContainerReferenceNumber" })
					@Html.Hidden("hdContainerDropId", "0", new { name = "hdContainerDropId" })
					@Html.Hidden("hdStatusId", 1, new { name = "hdStatusId" })
					@Html.Hidden("hdDropNumber", "1", new { name = "hdDropNumber" })
					@Html.Hidden("hdDropStatusName", "ACTIVE", new { name = "hdDropStatusName" })
					@Html.Hidden("hdDropReferenceNumber", "", new { name = "hdDropReferenceNumber" })

					<table class="denominationgroup">
						<tr class="denominationgroup_clone_row">
							<td>
								<!-- Note Details -->
								<div class="CurrencyDenominations">
									<fieldset id="fieldset3">
										<legend>Note Details</legend>

										<table>
											<caption>
												<strong>Notes</strong>
											</caption>
											<tr>
												<td>
													<table width="350px">
														<tr>
															<td> Denomination </td>
															<td style="width: 70px"> </td>
															<td align="right"> Count </td>
															<td style="width: 40px"> </td>
															<td align="right"> Value (R) </td>
														</tr>
													</table>
												</td>
											</tr>
											<tr>
												<td class="clsNotessubtotal">
													<div class="clsnotes">
														<table class='denominationparent' currencytype="Notes">
															<tr class="clsline">
																<td class="last">
																	@Html.DropDownList("dropDownListNote", ViewData["dropDownListNote"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Notes" })
																	@Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
																</td>
																<td>
																	@Html.TextBox("textNoteCount", "", new { id = "textNoteCount", @class = "dropdown denomination", style = "margin-right: 5px" })
																</td>
																<td>
																	@Html.TextBox("textNoteValue", "", new { id = "textNoteValue", @class = "sbv_notes_value dropdown denomination" })
																</td>
																<td>
																	<a type="button" name="buttonAddNotes">
																		<img src="~/Content/images/add.png" alt="" style="border: solid 1px gray; margin-top: 3px;" />
																	</a>
																</td>
																<td style="height: 16px; visibility: hidden; width: 16px;">
																	<a class="remove" type="button" name="buttonRemoveNotes">
																		<img alt="" src='~/Content/images/remove.png' style='border: solid 1px gray; margin-top: 3px;' />
																	</a>
																</td>
															</tr>
														</table>
													</div>
													<!-- take_notes -->
													<table>
														<tr>
															<td style="text-align: left; width: 120px;"> Subtotal </td>
															<td>
																@Html.TextBox("textNotesSubtotal", "0.00", new { @class = "SubTotals", @readonly = "readonly" })
															</td>
														</tr>
													</table>
												</td>
											</tr>
										</table>
									</fieldset>
								</div>
							</td>
							<td>
								<!-- Coin Details -->
								<div class="CurrencyDenominations" action=" " method="post">
									<fieldset id="fieldset4">
										<legend>Coin Details</legend>

										<table>
											<caption>
												<strong>Coins</strong>
											</caption>
											<tr>
												<td>
													<table width="350px">
														<tr>
															<td> Denomination </td>
															<td style="width: 70px"> </td>
															<td align="right"> Count </td>
															<td style="width: 40px"> </td>
															<td align="right"> Value (R) </td>
														</tr>
													</table>
												</td>
											</tr>
											<tr>
												<td class="clsCoinssubtotal">
													<div class="clscoins">
														<table class='denominationparent' currencytype="Coins">
															<tr class="clsCoinsline">
																<td class="last">
																	@Html.DropDownList("dropDownListCoin", ViewData["dropDownListCoin"] as SelectList, new { style = "width:125px; height:27px;", denominationType = "Coins" })
																	@Html.Hidden("hdContainerDropItemId", "0", new { name = "hdContainerDropItemId" })
																</td>
																<td>
																	@Html.TextBox("textCoinCount", "", new { id = "textCoinCount", @class = "dropdown denomination", style = "margin-right: 5px" })
																</td>
																<td>
																	@Html.TextBox("textCoinValue", "", new { id = "textCoinValue", @class = "sbv_coins_value dropdown denomination", style = "text-align:right" })
																</td>
																<td>
																	<a type="button" name="buttonAddCoins">
																		<img src="~/Content/images/add.png" alt="" style="border: solid 1px gray; margin-top: 3px;" />
																	</a>
																</td>
																<td style="height: 16px; width: 16px;">
																	<a class="remove" type="button" name="buttonRemoveCoins" style="visibility: hidden">
																		<img alt="" src='~/Content/images/remove.png' style='border: solid 1px gray; margin-top: 3px;' />
																	</a>
																</td>
															</tr>
														</table>
													</div>
													<!-- take -->
													<table>
														<tr>
															<td style="text-align: left; width: 120px;"> Subtotal </td>
															<td>
																@Html.TextBox("textCoinsSubtotal", "0.00", new { @class = "SubTotals", @readonly = "readonly" })
															</td>
														</tr>
													</table>
												</td>
											</tr>
										</table>

										<div class="row" name="IsNotForSingleDeposit">
											<div class="span8"></div>
											<div class="span3 offset1">
												<table style="margin-left: 72px;">
													<tr>
														<td><button style="" name="ButtonCopyDrop" class="btn btn-mini" type="button">Copy Drop</button></td>
														<td style="width:5px"></td>
														<td><button name="ButtonSubmitDrop" class="btn btn-mini btn-inverse" type="button">Submit</button></td>
													</tr>
												</table>

											</div>
										</div>

									</fieldset>
								</div>
							</td>
						</tr>
					</table>
				</fieldset>

            </td>
            <td class="containerDropRemoval">
                <a class="DeleteContainerDrop" type="button" name="DeleteContainerDrop">
                    <img alt="" src="~/Content/images/remove.png" style='margin-top: 3px' />
                </a>
            </td>
        </tr>
    </table>
</div>

<!--END CLONING Elements -->

@Html.HiddenFor(model => model.Country, new { id = "hdCountry" })


<script type="text/javascript">

    function GetSites() {
        return { merchantId: $("#ddlMerchantSbvUser").val() };
    }



    function GetBanks() {
        return { siteId: $("#ddlSiteSbvUser").val() };
    }

</script>




<script id="ValidationWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <span class="headerTitle" />
        <span style="margin-left:5px;" class="confirmation-message"></span>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="no-cancel k-button" style="width:80px">Ok</button>
    </div>
</script>


<script id="ConfirmWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
        <button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
    </div>
</script>


<script id="DeleteContainermWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
        <button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
    </div>
</script>


<script id="loadingWindow" type="text/x-kendo-template">
    <div style="margin-left:20px; margin-top:30px;">
        <table>
            <tr>
                <td><img src="@Url.Content("~/Content/Images/loading.gif")" /></td>
                <td style ="width:10px;"></td>
                <td><span class="confirmation-message"></span></td>
            </tr>
        </table>
    </div>

    <div style="margin-left:160px; margin-top:5px;">
        <button id="btnConfirmCancel" class="confirm-cancel" style="width:80px; visibility:hidden">Yes</button>
    </div>
</script>



<script id="MessageWindow" type="text/x-kendo-template">
    <div style="margin-left:20px;">
        <img src="@Url.Content("~/Content/Images/infoimg.jpg")" class="imager" style="float:left" />
        <br />
        <p style="margin-left:5px;" class="confirmation-message"></p>
    </div>

    <div style="margin-left:160px; margin-top:15px;">
        <button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Ok</button>
    </div>
</script>







@Html.HiddenFor(model => model.SiteId, new { id = "hdSiteId" })

<input type="hidden" value="edited" id="hdProcessName" />

<a id="btnExitToIndex" class="hide top" href="@Url.Action("Index", "CashDeposit")"></a> 


<script type="text/javascript">
    
    $(document).ready(function () {

        $("#ContainersHolder .bagOrCanister").remove();
        getCashDeposit();



        function getCashDeposit() {

            //loadingWindow("Please wait...<br>Loading Cash deposit");
            var parameters = { cashDepositId: $("#hdCashDepositId").val() };

            var dropOrDepositDescription = ($('#ddlDepositType option:selected').text() == "Multi Drop") ? "Drop" : "Deposit";

            $.ajax({
                type: "POST",
                data: JSON.stringify(parameters),
                contentType: "application/json; charset=utf-8",
                url: '@Url.Action("Get")',
                dataType: "json",
                success: function (cashDeposit) {

                    if (cashDeposit != null) {

                        //// Cash deposit elements
                        var referenceNumber = $("#ddlDepositeReference option:selected").text();

                        if (referenceNumber != cashDeposit.Narrative) {
                        	$("#txtCustomDepositeRef").val(cashDeposit.Narrative);
                            $("#txtCustomDepositeRef").removeClass('hide').addClass('show');
                        }
                        else {
                            $("#txtCustomDepositeRef").removeClass("show").addClass("hide");
                        }

                        var dropdownlist = $("#ddlSiteSbvUser");
                        dropdownlist.val(cashDeposit.SiteId);

                        // Containers
                        $.each(cashDeposit.Containers, function (a, container) {
                            AddContainer();

                            // Hide/Show AddNewContainerropButton by Seposit selection.
                            if ($("#ddlDepositType option:selected").text() == "Single Deposit") {
                                $("input[name='ButtonNewContainerDrop']").hide(); // remove ButtonNewContainerDrop
                            }
                            else {
                                $("input[name='ButtonNewContainerDrop']").show();
                            }


                            var lastContainer = $("#ContainersHolder .bagOrCanister:last-child");
                            lastContainer.find(".denomination_groups_clone").remove();

                            var containerTypesData = $("#ddlGlobalContainerTypes").find("option");

                            var bagsContainerTypes = lastContainer.find("#ddlContainerType");
                            bagsContainerTypes.find("option").remove();

                            containerTypesData.each(function () {
                                bagsContainerTypes.append($('<option value="' + $(this).val() + '">' + $(this).text() + '</option>'));
                            });


                            var containerAttributeTable = "";
                        	// add attribute1.
                            if (container.SerialNumber != "" && container.SerialNumber != null) {
                                containerAttributeTable = "<tr>" +
                                    "<td id='Attribute1Label'>Serial Number&nbsp;&nbsp;</td>" +
                                    "<td> <input type='text' maxlength='14' " + container.SerialNumber + "' value='" + container.SerialNumber + "'  attributeName='" + container.SerialNumber + "' id='Attribute1' /></td>" +
                                    "</tr>";
                                lastContainer.find("#containerAttributesPlaceHolder").append(containerAttributeTable);
                            }

                            // add attribute2
                            if (container.SealNumber != "" && container.SealNumber != null) {
                                containerAttributeTable = "<tr>" +
                                    "<td id='Attribute2Label'>Seal Number&nbsp;&nbsp;</td>" +
                                    "<td> <input type='text' maxlength='14' value='" + container.SealNumber + "' attributeName='" + container.SealNumber + "' id='Attribute2' /></td>" +
                                    "</tr>";
                                lastContainer.find("#containerAttributesPlaceHolder").append(containerAttributeTable);
                            }


                            var dropCounter = 0;

                            $.each(container.ContainerDrops, function (b, drop) {
                                dropCounter++;

                                // ContainerDrops
                                denomination_groups_clone.clone(true).appendTo(lastContainer.find(".denomination_groups_parent"));
                            	// hdContainerId
                                lastContainer.find("input[name='hdContainerId']").val(container.ContainerId);
                                lastContainer.find("input[name='hdContainerReferenceNumber']").val(container.ReferenceNumber);


                                var formDrop = lastContainer.find(".drop_level").last();

                                // always get the last appended container drop
                                var lastDenominationDrop = lastContainer.find(".denominationgroup").last();

                                formDrop.find("input[name='hdContainerDropId']").val(drop.ContainerDropId);
                                formDrop.find("input[name='hdDropStatusName']").val(drop.Name);
                                formDrop.find("input[name='hdStatusId']").val(drop.StatusId);
                                formDrop.find("input[name='hdDropReferenceNumber']").val(drop.ReferenceNumber);

                                lastDenominationDrop.find(".clsnotes .clsline").remove();
                                lastDenominationDrop.find(".clscoins .clsCoinsline").remove();

                                // denominations
                                var notesParent = lastDenominationDrop.find("table[CurrencyType='Notes']");
                                var coinsParent = lastDenominationDrop.find("table[CurrencyType='Coins']");

                                $.each(drop.ContainerDropItems, function (c, denomination) {

                                    var denominationCount = denomination.Count;
                                    var denominationType = denomination.DenominationType;
                                    var valueInCents = denomination.ValueInCents;
                                    var containerDropItemId = denomination.ContainerDropItemId;
                                    
                                    if (denominationType == "Notes") {
                                        row_clone_notes.clone(true).appendTo(notesParent);
                                        // note values
                                        var notes = lastDenominationDrop.find(".clsnotes .clsline:last-child");
                                        var noteCount = notes.find('input[name="textNoteCount"]');
                                        var noteDeno = notes.find('select[name="dropDownListNote"]');
                                        var noteValue = notes.find('input[name="textNoteValue"]');
                                        notes.find('input[name="hdContainerDropItemId"]').val(containerDropItemId);
                                        setCashDepositProcessingElementsValues(noteCount, noteValue, noteDeno, valueInCents, denominationCount, false);
                                    }

                                    if (denominationType == "Coins") {
                                        row_clone_coins.clone(true).appendTo(coinsParent);
                                        // coin values
                                        var coins = lastDenominationDrop.find(".clscoins .clsCoinsline:last-child");
                                        var coinCount = coins.find('input[name="textCoinCount"]');
                                        var coinDeno = coins.find('select[name="dropDownListCoin"]');
                                        var coinValue = coins.find('input[name="textCoinValue"]');
                                        coins.find('input[name="hdContainerDropItemId"]').val(containerDropItemId);
                                        setCashDepositProcessingElementsValues(coinCount, coinValue, coinDeno, valueInCents, denominationCount, false);
                                    }

                                    lastDenominationDrop.find(".clsCoinssubtotal input").attr('disabled', true);

                                    if (drop.StatusName == "SUBMITTED") {
                                    	lastContainer.find("#Attribute1").attr('disabled', true);
                                    	lastContainer.find("#Attribute2").attr('disabled', true);
                                    	lastContainer.find("#ddlContainerType").attr('disabled', true);
                                        var controls = lastDenominationDrop.find("input, select");
                                        controls.each(function () {
                                            $(this).attr('disabled', true);
                                        });
                                    }
                                });

                                var hasNotesInDrop = notesParent.find("input[name='textNoteCount']");
                                if (hasNotesInDrop.length == 0) {
                                    row_clone_notes.clone(true).appendTo(notesParent);
                                }

                                var hasCoinsInDrop = coinsParent.find("input[name='textCoinCount']");
                                if (hasCoinsInDrop.length == 0) {
                                    row_clone_coins.clone(true).appendTo(coinsParent);
                                }

                                notesParent.find("a.remove").first().hide();
                                coinsParent.find("a.remove").first().hide();

                                // notes subtotals
                                var denominationGroupCollectionNotes = lastDenominationDrop.find("table[CurrencyType='Notes'] input[name='textNoteValue']");
                                var textSubTotal = lastDenominationDrop.find(".clsNotessubtotal input[name='textNotesSubtotal']");
                                getsubTotal(denominationGroupCollectionNotes, textSubTotal);

                                // coins subtotals
                                var denominationGroupCollectionCoins = lastDenominationDrop.find("table[CurrencyType='Coins'] input[name='textCoinValue']");
                                var textCoinSubTotal = lastDenominationDrop.find(".clsCoinssubtotal input[name='textCoinsSubtotal']");
                                getsubTotal(denominationGroupCollectionCoins, textCoinSubTotal);


                                //Labels
                                var lblSerialNumber = lastDenominationDrop.parents(".denomination_groups_clone").find(".lblSerialNumber");
                                lblSerialNumber.html(dropOrDepositDescription + " Serial Number");

                                var lblDropAmount = lastDenominationDrop.parents(".denomination_groups_clone").find(".lblDropAmount");
                                lblDropAmount.html(dropOrDepositDescription + " Amount");

                                var lblDropReference = lastDenominationDrop.parents(".denomination_groups_clone").find(".lblDropReference");
                                lblDropReference.html((dropOrDepositDescription != 'Drop') ? "Custom Deposit Reference" : dropOrDepositDescription + " Reference");

                                var lbldropTitleAndNumber = lastDenominationDrop.parents(".denomination_groups_clone").find(".lblDropTitleAndNumber");
                                lbldropTitleAndNumber.html(dropOrDepositDescription + " " + dropCounter);


                                //txtDropReference
                                var txtDropReference = lastDenominationDrop.parents(".denomination_groups_clone").find("input[name='txtDropReference']");
                                txtDropReference.val(drop.Narrative);


                                //txtDropAmount
                                var txtDropAmount = lastDenominationDrop.parents(".denomination_groups_clone").find("input[name='txtDropAmount']");
                                txtDropAmount.val(drop.Amount);

                                //hdDropNumber
                                lastDenominationDrop.parents(".denomination_groups_clone").find("input[name='hdDropNumber']").val(drop.DropNumber);


                                //txtDropSerialNumber
                                var txtDropSerialNumber = lastDenominationDrop.parents(".denomination_groups_clone").find("input[name='txtDropSerialNumber']");
                                txtDropSerialNumber.attr('value', drop.BagSerialNumber);
                                

                                // Drop total
                                var overallTotal = lastDenominationDrop.parents(".denomination_groups_clone").find(".TotalInDrop");
                                getTotalInDrop(overallTotal, textSubTotal, textCoinSubTotal);

                                if ($('#ddlDepositType option:selected').text() == "Multi Deposit") {
                                    lblSerialNumber.remove();
                                    txtDropSerialNumber.remove();
                                }

                                if ($('#ddlDepositType option:selected').text() == "Single Deposit") {

                                    $("div[name='IsNotForSingleDeposit']").removeClass('show').addClass('hide');
                                    lastDenominationDrop.parents(".denomination_groups_clone").find(".OnSingleInsertDropDescription").html("");
                                    lblSerialNumber.html("<b>" + dropOrDepositDescription + " Total: " + overallTotal.html() + "</b>");

                                    lblDropReference.closest("tr").removeClass("show").addClass("hide");
                                    txtDropReference.remove();
                                }
                                
                            }); // end drop

                            lastContainer.find("a.DeleteContainerDrop").first().hide();
                            lastContainer.find('#ddlContainerType').attr('value', container.ContainerTypeId);
                            lastContainer.find('#Attribute1').attr('value', container.SerialNumber);

                        }); // end container

                        if ($('#ddlDepositType option:selected').text() == "Multi Deposit") {
                            $("input[name ='ButtonNewContainerDrop']").attr('value', "Add New Deposit");
                        }

                        var buttonCopyDrop = $("button[name ='ButtonCopyDrop']");
                        buttonCopyDrop.each(function () {
                            $(this).html("Copy " + dropOrDepositDescription);
                        });

                        $("#gap").removeClass("hide");
                        $("#gap").addClass("show");
                        
                        // Close Loading Indicator
                        $("#btnConfirmCancel").click();
                    }



                    var containers = $(".bagOrCanister");
                    
                    containers.each(function() {
                    	var containerDrops = $(this).find(".denomination_groups_clone");
	                    var container = $(this);

                        containerDrops.each(function() {
                            var inputControls = $(this).find("input[type='text'], select");
                            var hdDropStatusName = $(this).find("input[name='hdDropStatusName']").val();
                            

                            if (hdDropStatusName == "SUBMITTED") {
                            	container.find("#Attribute1").attr('disabled', true);
                            	container.find("#Attribute2").attr('disabled', true);
                            	container.find("#ddlContainerType").attr('disabled', true);

                                inputControls.each(function () {
                                    $(this).attr('disabled', true);
                                });

                                $(this).css("background-color", "ButtonFace");
                                $(this).css("border-color", "orange");

                                var submitDropButton = $(this).find("button[name='ButtonSubmitDrop']");
                                var copyDropButton = $(this).find("button[name='ButtonCopyDrop']");

                                submitDropButton.html("Submitted");
                                submitDropButton.attr('disabled', hdDropStatusName == "SUBMITTED") ;
                            	//copyDropButton.attr('disabled', hdDropStatusName == "SUBMITTED");
                                
                            }
                        });
                    });


                    var inputControls = $(".bagOrCanister .denomination_groups_clone");

                    inputControls.each(function () {
                        var controls = $(this).find("input[type='text'], select");
                        var hdDropStatusName = $(this).find("input[name='hdDropStatusName']").val();

                        if (hdDropStatusName != "SUBMITTED") {

                            controls.each(function () {
                                $(this).attr('disabled', false);
                            });
                        }
                    });


                },
                // error occurred
                error: function (result) {
                    // Close Loading Indicator
                    $("#btnConfirmCancel").click();
                    showMessageBox("ValidationWindow", "Alert Response", "", "Failed to save cash deposit!");
                }
            });
        }




        /** On TextChanged Container Type **/
        $("#ddlContainerType").on('change', function () {
            var parameters = { containerTypeId: $(this).attr('value') };
            var parent = $(this).parents(".sFieldsetContainer");
            getContainerTypeAttributes(parent, parameters);
        }); /** end Container Type changeEvent **/



        function getContainerTypeAttributes(parent, parameters) {
            var children = parent.find("#containerAttributesPlaceHolder");
            var url = '@Url.Action("GetContainerTypeAttributes")';

            children.children().remove();

            $.getJSON(url, parameters, function (containerAttribute) {
                var containerAttributeTable = "<table class='ClassAttributes'>";

                if (containerAttribute.Attribute1 != "") {
                    if (containerAttribute.Attribute1 != null && containerAttribute.Attribute1 != 'undefined') {
                        containerAttributeTable += "<tr><td id='Attribute1Label'>" + containerAttribute.Attribute1 + "</td>";
                        containerAttributeTable += "<td> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute1 + "'  minlength='" + containerAttribute.Attribute1MinLength + "'  maxlength='" + containerAttribute.Attribute1MaxLength + "' id='Attribute1' style='border:#8b8c8d 1px solid;' /></td><td> </tr>";
                    }
                    if (containerAttribute.Attribute2 != null && containerAttribute.Attribute2 != 'undefined') {
                        containerAttributeTable += "<tr> <td id='Attribute2Label'>" + containerAttribute.Attribute2 + "</td>";
                        containerAttributeTable += "<td> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute2 + "'  minlength='" + containerAttribute.Attribute2MinLength + "'  maxlength='" + containerAttribute.Attribute2MaxLength + "' id='Attribute2' style='border:#8b8c8d 1px solid;' /></td> </tr>";
                    }
                    if (containerAttribute.Attribute3 != null && containerAttribute.Attribute3 != 'undefined') {
                        containerAttributeTable += "<tr> <td id='Attribute3Label'>" + containerAttribute.Attribute3 + "</td>";
                        containerAttributeTable += "<td> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute3 + "'  minlength='" + containerAttribute.Attribute3MinLength + "'  maxlength='" + containerAttribute.Attribute3MaxLength + "' id='Attribute3' style='border:#8b8c8d 1px solid;' /></td> </tr>";
                    }
                    if (containerAttribute.Attribute4 != null && containerAttribute.Attribute4 != 'undefined') {
                        containerAttributeTable += "<tr> <td id='Attribute4Label'>" + containerAttribute.Attribute4 + "</td>";
                        containerAttributeTable += "<td> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute4 + "'  minlength='" + containerAttribute.Attribute4MinLength + "'  maxlength='" + containerAttribute.Attribute4MaxLength + "' id='Attribute4' style='border:#8b8c8d 1px solid;' /></td>  </tr>";
                    }
                    if (containerAttribute.Attribute5 != null && containerAttribute.Attribute5 != 'undefined') {
                        containerAttributeTable += "<tr> <td id='Attribute5Label'>" + containerAttribute.Attribute5 + "</td>";
                        containerAttributeTable += "<td> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute5 + "'  minlength='" + containerAttribute.Attribute5MinLength + "'  maxlength='" + containerAttribute.Attribute5MaxLength + "' id='Attribute5' style='border:#8b8c8d 1px solid;' /></td> </tr>";
                    }
                    containerAttributeTable += "</table>";

                    // Attach to a relative Container
                    children.html(containerAttributeTable);
                }
                else children.html("");
            });
        }

        //////////////////////////////////////////////
    });

</script>


<style type="text/css">
    .k-window-action {
        visibility: hidden;
    }
</style>










<script type="text/javascript">

	//Merchant dropdown change
	$("#ddlMerchantSbvUser").change(function () {
		var container = $("#ContainersHolder .bagOrCanister");
		container.find("#containerAttributesPlaceHolder").children().remove();
		container.find("#ddlContainerType option:not(:first)").remove();

		$("#txtCitCode").attr('value', '');
		$("#ddlDepositeReference").find("option").remove();

		$('#hdMerchantId').val($('#ddlMerchantSbvUser').val());

		$("#ddlBank").find("option:not(:first)").remove();

		$("#ddlSiteSettlementAccount").find("option:not(:first)").remove();
	});





	$("#ddlSiteSbvUser").change(function () {
		var parameters = { siteId: $(this).val() };

		var ddlDepositeReference = $("#ddlDepositeReference");
		var ddlBank = $("#ddlBank");
		var ddlContainerType = $("#ddlContainerType");
		var ddlSiteSettlementAccount = $("#ddlSiteSettlementAccount");

		$("#txtCitCode").attr('value', "");

		$.ajax({
			type: "POST",
			data: JSON.stringify(parameters),
			contentType: "application/json; charset=utf-8",
			url: '@Url.Action("GetBanksContainerTypesAndDepositReferences")',
			dataType: "json",
			success: function (data) {
				// drop down options
				ddlBank.find("option").remove();
				ddlDepositeReference.find("option").remove();
				ddlContainerType.find("option").remove();
				ddlSiteSettlementAccount.find("option").remove();
				ddlSiteSettlementAccount.append($('<option value="-1">Please Select...</option>'));

				//Banks
				for (var i = 0; i < data.Banks.length; i++) {
					ddlBank.append($('<option value="' + data.Banks[i].Id + '">' + data.Banks[i].Name + '</option>'));
				}

				//DepositReferences
				for (var i = 0; i < data.DepositReferences.length; i++) {
					ddlDepositeReference.append($('<option value="' + data.DepositReferences[i].Id + '">' + data.DepositReferences[i].Name + '</option>'));
				}

				//ContainerTypes
				var bags = $("#ContainersHolder .bagOrCanister");

				var bagsContainerTypes = bags.find("#ddlContainerType");

				bagsContainerTypes.each(function () {
					var ddlBagType = $(this);

					ddlBagType.find('option').remove();
					var bagAttributes = ddlBagType.parents(".bagOrCanister").find("#containerAttributesPlaceHolder").children();
					bagAttributes.remove();

					for (var i = 0; i < data.ContainerTypes.length; i++) {
						ddlBagType.append($('<option value="' + data.ContainerTypes[i].Id + '">' + data.ContainerTypes[i].Name + '</option>'));
					}

				});

				$("#txtCitCode").attr('value', data.DepositReferences[0].Tag);
				$("#hdInitialCitSerialNumber").attr('value', data.CarrierStartNumber);

				var ddlGlobalContainerType = $("#ddlGlobalContainerType");
				ddlGlobalContainerType.find("option").remove();

				for (var i = 0; i < data.ContainerTypes.length; i++) {
					ddlGlobalContainerType.append($('<option value="' + data.ContainerTypes[i].Id + '">' + data.ContainerTypes[i].Name + '</option>'));
				}
			}
		});
	});



	//Get SiteSettlement Accounts
	$("#ddlBank").change(function () {
		var parameters = {
			bankId: $(this).val(),
			siteId: $("#ddlSiteSbvUser").val()
		};

		var ddlSiteSettlementAccount = $("#ddlSiteSettlementAccount");

		$.ajax({
			type: "POST",
			data: JSON.stringify(parameters),
			contentType: "application/json; charset=utf-8",
			url: '@Url.Action("GetSiteSettlementAccounts")',
			dataType: "json",
			success: function (data) {
				// drop down options
				ddlSiteSettlementAccount.find("option").remove();

				//SettlementAccounts
				for (var i = 0; i < data.SettlementAccounts.length; i++) {
					ddlSiteSettlementAccount.append($('<option value="' + data.SettlementAccounts[i].Id + '">' + data.SettlementAccounts[i].Name + '</option>'));
				}
			}
		});
	});





	function getContainerTypeAttributes(parent, parameters) {
		var children = parent.find("#containerAttributesPlaceHolder");
		var url = '@Url.Action("GetContainerTypeAttributes")';

		children.children().remove();

		$.getJSON(url, parameters, function (containerAttribute) {
			var containerAttributeTable = "<table class='ClassAttributes'>";

			if (containerAttribute.Attribute1 != "") {
				if (containerAttribute.Attribute1 != null && containerAttribute.Attribute1 != 'undefined') {
					containerAttributeTable += "<tr><td style='width:100px;' id='Attribute1Label'>" + containerAttribute.Attribute1 + "</td>";
					containerAttributeTable += "<td style='width:500px;'> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute1 + "'  minlength='" + containerAttribute.Attribute1MinLength + "'  maxlength='" + containerAttribute.Attribute1MaxLength + "' id='Attribute1' style='border:#8b8c8d 1px solid;' /></td><td> </tr>";
				}
				if (containerAttribute.Attribute2 != null && containerAttribute.Attribute2 != 'undefined') {
					containerAttributeTable += "<tr> <td style='width:100px;' id='Attribute2Label'>" + containerAttribute.Attribute2 + "</td>";
					containerAttributeTable += "<td style='width:500px;'> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute2 + "'  minlength='" + containerAttribute.Attribute2MinLength + "'  maxlength='" + containerAttribute.Attribute2MaxLength + "' id='Attribute2' style='border:#8b8c8d 1px solid;' /></td> </tr>";
				}
				if (containerAttribute.Attribute3 != null && containerAttribute.Attribute3 != 'undefined') {
					containerAttributeTable += "<tr> <td style='width:100px;' id='Attribute3Label'>" + containerAttribute.Attribute3 + "</td>";
					containerAttributeTable += "<td style='width:500px;'> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute3 + "'  minlength='" + containerAttribute.Attribute3MinLength + "'  maxlength='" + containerAttribute.Attribute3MaxLength + "' id='Attribute3' style='border:#8b8c8d 1px solid;' /></td> </tr>";
				}
				if (containerAttribute.Attribute4 != null && containerAttribute.Attribute4 != 'undefined') {
					containerAttributeTable += "<tr> <td style='width:100px;' id='Attribute4Label'>" + containerAttribute.Attribute4 + "</td>";
					containerAttributeTable += "<td style='width:500px;'> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute4 + "'  minlength='" + containerAttribute.Attribute4MinLength + "'  maxlength='" + containerAttribute.Attribute4MaxLength + "' id='Attribute4' style='border:#8b8c8d 1px solid;' /></td>  </tr>";
				}
				if (containerAttribute.Attribute5 != null && containerAttribute.Attribute5 != 'undefined') {
					containerAttributeTable += "<tr> <td style='width:100px;' id='Attribute5Label'>" + containerAttribute.Attribute5 + "</td>";
					containerAttributeTable += "<td style='width:500px;'> <input class='dropdown' type='text' attributeName='" + containerAttribute.Attribute5 + "'  minlength='" + containerAttribute.Attribute5MinLength + "'  maxlength='" + containerAttribute.Attribute5MaxLength + "' id='Attribute5' style='border:#8b8c8d 1px solid;' /></td> </tr>";
				}
				containerAttributeTable += "</table>";

				// Attach to a relative Container
				children.html(containerAttributeTable);
			}
			else children.html("");
		});
	}





	// On Submit Cash deposit
	$("button[name = 'edited'], button[name = 'Submitted']").click(function () {
		var transactionStatusName = "ACTIVE";

		var containerDrop = $(this).parents(".denomination_groups_clone");
		containerDrop.find("input[name='hdDropStatusName']").val("ACTIVE");

		var returnMessage = null;
		var dropOrDepositDescription = $('#ddlDepositType option:selected').text() == "Multi Drop" ? "Drop" : "Deposit";

		var processType = $(this).attr('name');

		if (processType == 'captured') {
			if (parseInt($('#hdCashDepositId').val()) > 0) {
				processType = "edited";
			}
		}
		var underlyingActionName = $("#hdProcessName").val();

		var hdStatusNames = $(".well").find("input[name='hdDropStatusName']");

		if (processType == 'Submitted') {
			transactionStatusName = "SUBMITTED";

			returnMessage = 'Container ' + dropOrDepositDescription + ' submitted successfully.';
		}

		switch (processType) {

			case "captured":
				{
					saveCashDeposit('@Url.Action("Create")', processType, returnMessage, transactionStatusName, underlyingActionName, '@Url.Action("Index")', hdStatusNames, '@Url.Action("Submit")/?id=');
					break;
				}

			case "copied":
				{
					saveCashDeposit('@Url.Action("Copy")', processType, returnMessage, transactionStatusName, underlyingActionName, '@Url.Action("Index")', hdStatusNames, '@Url.Action("Submit")/?id=');
					break;
				}

			case "edited":
				{
					saveCashDeposit('@Url.Action("Edit")', processType, returnMessage, transactionStatusName, underlyingActionName, '@Url.Action("Index")', hdStatusNames);
					break;
				}

			case "Submitted":
				{
					onSubmitSingleDeposit('@Url.Action("Submit")', processType, returnMessage, transactionStatusName, underlyingActionName, '@Url.Action("Index")', hdStatusNames, '@Url.Action("Submit")/?id=');
					break;
				}
			default: break;
		}
	});









	$(document).ready(function () {

		// On Submit Cash deposit
		$("button[name='ButtonSubmitDrop']").on("click", function () {
			var dropDescription = $('#ddlDepositType option:selected').text() == "Multi Drop" ? "Drop" : "Deposit";
			var depositType = $('#ddlDepositType option:selected').text();

			// Bag Properties
			var currentContainer = $(this).parents(".bagOrCanister");

			var containerTypeId = currentContainer.find("#ddlContainerType");
			var containerTotal = currentContainer.find(".container_header_total").html();
			var attribute1 = currentContainer.find("#Attribute1");
			var attribute2 = currentContainer.find("#Attribute2");
			var allContainers = $("#ContainersHolder .bagOrCanister");
			var cumulativeDropAmount = 0;


			// ContainerDrop Properties
			var submitButton = $(this);
			var formDrop = $(this).parents(".drop_level");
			var containerDrop = $(this).parents(".denomination_groups_clone");

			var dropBagSerialNumberInput = containerDrop.find("input[name='txtDropSerialNumber']");
			var txtDropAmount = containerDrop.find("input[name='txtDropAmount']").val(); // check if its equal to drop total amount below

			var containerId = $(this).parents(".bagOrCanister").find("input[name='hdContainerId']").val();
			var hdDropReferenceNumber = $(this).parents(".denomination_groups_clone").find("input[name='hdDropReferenceNumber']").val();


			var containerDropModel =
            {
            	ContainerDropId: containerDrop.find("input[name='hdContainerDropId']").val(),
            	ContainerId: containerId,
            	Number: containerDrop.find("input[name='hdDropNumber']").val(),
            	Amount: txtDropAmount,
            	Name: "SUBMITTED",
            	Narrative: containerDrop.find("input[name='txtDropReference']").val(),
            	BagSerialNumber: $.trim(dropBagSerialNumberInput.length == 0 ? "" : dropBagSerialNumberInput.val()),
            	ReferenceNumber: hdDropReferenceNumber,
            	ContainerDropItems: []
            };

			var containerDropItems = formDrop.find("select");

			containerDropItems.each(function () {
				var row = $(this).parents(".clsline, .clsCoinsline");
				var noteValue = row.find("input[name='textNoteValue']");
				var coinValue = row.find("input[name='textCoinValue']");
				var noteCount = row.find("input[name='textNoteCount']");
				var coinCount = row.find("input[name='textCoinCount']");
				var dropItmId = row.find("input[name='hdContainerDropItemId']");

				var value = noteValue.length == 0 ? coinValue : noteValue;
				var count = noteCount.length == 0 ? coinCount : noteCount;

				var containerDropItemModel =
                {
                	ContainerDropItemId: dropItmId.val(),
                	ContainerDropId: containerDropModel.ContainerDropId,
                	ValueInCents: $(this).val() == 1000500 ? 0 : $(this).val(),
                	Count: isNumber(count.val()) == false ? 0 : count.val(),
                	Value: isNumber(value.val()) == false ? 0 : value.val()
                };

				cumulativeDropAmount += parseFloat(containerDropItemModel.Value);

				// add denominations
				if ($(this).val() != 1000500 && containerDropItemModel.Count > 0) {
					containerDropModel.ContainerDropItems.push(containerDropItemModel);
				}
			});

			var containerModel =
            {
            	ContainerId: currentContainer.find("input[name='hdContainerId']").val(),
            	CashDepositId: $("#hdCashDepositId").val(),
            	ContainerTypeId: (containerTypeId.val() == -1) ? null : containerTypeId.val(),
            	SerialNumber: attribute1.length == 0 ? "" : attribute1.val(),
            	SealNumber: attribute2.length == 0 ? "" : attribute2.val(),
            	IsPrimaryContainer: allContainers.length == 1,
            	Amount: containerTotal,
            	ContainerDrops: []
            };

			containerModel.ContainerDrops.push(containerDropModel);
			

			// Cash deposit Properties        var referenceNumber = "";
			var siteId = ($("#ddlSiteSbvUser").length == 0) ? $("#hdSiteId").val() : $("#ddlSiteSbvUser").val();

			var narrative = "";

			if ($("#ddlDepositeReference").length > 0) {
				narrative = $("#ddlDepositeReference").val() != 0 ? $("#ddlDepositeReference option:selected").text() : $.trim($("#txtCustomDepositeRef").val());
			}
			else {
				narrative = $("#txtCustomDepositeRef").val();
			}

			var cashDepositModel =
            {
            	CashDepositId: $.trim($('#hdCashDepositId').val()),
            	DepositTypeId: $.trim($('#ddlDepositType').val()),
            	DepositTypeName: $('#ddlDepositType option:selected').text(),
            	SiteId: siteId,
            	AccountId: $.trim($('#ddlSiteSettlementAccount').val()),
            	Narrative: narrative,
            	DepositedAmount: parseFloat($('#txtTotalDepositAmount').val()),
            	TransactionStatusName: 'ACTIVE',
            	TransactionReference: $("#hdTransactionReferenceNumber").val(),
            	IsSubmitted: false,
            	ActionName: $("#hdProcessName").val(),
            	CreatedById: $("#hdCreatedById").val(),
            	CreateDate: $("#hdCreateDate").val(),
            	Containers: []
            };
			cashDepositModel.Containers.push(containerModel);

			var siteSettlementAccountId = $.trim($('#ddlSiteSettlementAccount').val());
			if (siteSettlementAccountId == '' || siteSettlementAccountId <= 0) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Please select Site Settlement Account");
				$("#btnConfirmCancel").click();
				return true;
			}

			if (containerTypeId.val() <= 0 || containerTypeId.val() == "" || containerTypeId.val() == null) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Please select Container Type!");
				$("#btnConfirmCancel").click();
				return true;
			}

			if (attribute1.length != 0 && $.trim(attribute1.val()).length < 14) {
			    $("#btnConfirmCancel").click();
			    showMessageBox("MessageWindow", "Validation Error", "", "Container 'Serial Number' must be 14 characters.");
			    $("#btnConfirmCancel").click();
			    return true;
			}

			if (attribute2.length != 0 && $.trim(attribute2.val()).length < 14) {
			    $("#btnConfirmCancel").click();
			    showMessageBox("MessageWindow", "Validation Error", "", "Container 'Seal Number' must be 14 characters.");
			    $("#btnConfirmCancel").click();
			    return true;
			}

			if (attribute1.length > 0) {
				if (isNaN(attribute1.val())) {
					$("#btnConfirmCancel").click();
					showMessageBox("MessageWindow", "Validation Error", "", "Container 'Serial Number' must be a number.");
					$("#btnConfirmCancel").click();
					return true;
				}
				else {
					if (isInitialCitStartCode(attribute1.val()) == false) {
						$("#btnConfirmCancel").click();
						showMessageBox("MessageWindow", "Validation Error", "", "Container 'Serial Number' must be a number starting with " + $.trim($("#hdInitialCitSerialNumber").val()));
						$("#btnConfirmCancel").click();
						return true;
					}
				}
			}

			if (attribute2.length != 0 && $.trim(attribute2.val()).length < 14) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Countainer Seal Number must be 14 characters.");
				$("#btnConfirmCancel").click();
				return true;
			}

			if (attribute2.length > 0 && isSealNumberANumber(attribute2.val()) == false) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Countainer Seal Number must be a number.");
				$("#btnConfirmCancel").click();
				return true;
			}

			if (attribute2.length > 0 && isSealNumberANumber(attribute2.val()) == false) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Countainer Seal Number must be a number.");
				$("#btnConfirmCancel").click();
				return true;
			}
		    // check containers duplication
			var countRepeatedSerialNumbers = checkForDuplicateSerialNumbers(cashDepositModel.Containers);
			if (countRepeatedSerialNumbers > 0) {
			    $("#btnConfirmCancel").click();
			    showMessageBox("MessageWindow", "Validation Error", "", "Please remove duplicate Serial Numbers");
			    $("#btnConfirmCancel").click();
			    return true;
			}

		    // check for duplicate seal numbers
			var countRepeatedSealNumbers = checkForDuplicateSealNumbers(cashDepositModel.Containers);
			if (countRepeatedSealNumbers > 0) {
			    $("#btnConfirmCancel").click();
			    showMessageBox("MessageWindow", "Validation Error", "", "Please remove duplicate Seal Numbers");
			    $("#btnConfirmCancel").click();
			}

			if (depositType == "Multi Drop") {
				if (containerDropModel.BagSerialNumber != "") {
					arrayOfDropSerialNumbers.push(containerDropModel.BagSerialNumber);
				}

				if (containerDropModel.BagSerialNumber.length < 3) {
					$("#btnConfirmCancel").click();
					showMessageBox("MessageWindow", "Validation Error", "", "Please enter correct " + dropDescription + " Serial Number.");
					$("#btnConfirmCancel").click();
					return true;
				}

				if (isDropSealNumbersDuplicated()) {
					$("#btnConfirmCancel").click();
					showMessageBox("MessageWindow", "Validation Error", "", "Please remove duplicate drop Serial Number.");
					$("#btnConfirmCancel").click();
					return true;
				}
			}

			var txtDropReference = containerDrop.find("input[name='txtDropReference']");

			if (txtDropReference.length == 0 || $.trim(txtDropReference.val()) == "") {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Please enter " + dropDescription + " Reference.");
				$("#btnConfirmCancel").click();
				return true;
			}

			if (containerDropModel.ContainerDropItems.length == 0) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "There are no denominations in " + dropDescription);
				$("#btnConfirmCancel").click();
				return true;
			}

		    var cumDropAmount = parseFloat(cumulativeDropAmount).toFixed(2);
		    var containerAmount = parseFloat(containerDropModel.Amount).toFixed(2);
            
		    if (cumDropAmount != containerAmount) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Submit Failure", "", dropDescription + " Amount not matching " + dropDescription + " Total");
				return false;
			}
			cumulativeDropAmount = 0;

			// Check if NOTES are exceeding "R1,000,000"
			var notesSubTotal = 0;
			var allNotesSubtotals = $("input[name='textNotesSubtotal']");
			allNotesSubtotals.each(function () {
				notesSubTotal += parseFloat($(this).val());
			});

			if (parseFloat(notesSubTotal) > 1000000) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Total Notes Value must not exceed R1,000,000");
				return false;
			}

			// Check if COINS are exceeding "R1,000,000"
			var coinsSubTotal = 0;
			var allCoinsSubtotals = $("input[name='textCoinsSubtotal']");
			allCoinsSubtotals.each(function () {
				coinsSubTotal += parseFloat($(this).val());
			});

			if (parseFloat(coinsSubTotal) > 100000) {
				$("#btnConfirmCancel").click();
				showMessageBox("MessageWindow", "Validation Error", "", "Total Coins Value must not exceed R100,000");
				return false;
			}

			// Post to server
			if (cashDepositModel.CashDepositId == 0 && containerModel.ContainerId == 0) {
			    // CashDeposit
			    loadingWindow("Please wait...<br>Submitting a " + dropDescription);
				submitContainerDropInNewContainerInNewCashDeposit(cashDepositModel, submitButton, formDrop, dropDescription);
			}
			else if (containerModel.ContainerId > 0) {
			    // Container
			    loadingWindow("Please wait...<br>Submitting a " + dropDescription);
				submitDropOrDeposit(containerDropModel, submitButton, formDrop, dropDescription, containerTotal);
			}
			else {
			    // Container Drop
			    loadingWindow("Please wait...<br>Submitting a " + dropDescription);
				var totalDepositAmount = $('#txtTotalDepositAmount').val();
				submitNewDropInNewContainer(containerModel, submitButton, formDrop, dropDescription, totalDepositAmount);
			}
			return false;
		});
		

		$("button[name='ButtonCopyDrop']").on("click", function () {

			var dropDescription = $('#ddlDepositType option:selected').text() == "Multi Drop" ? "Drop" : "Deposit";


			var containerDropItems =
            {
            	ContainerDropId: 0,
            	ContainerDropItemId: 0,
            	ValueInCents: 0,
            	Count: 0,
            	Value: 0
            };

			var containerId = $(this).parents(".bagOrCanister").find("input[name='hdContainerId']").val();
			var containerDropObject =
            {
            	ContainerDropId: 0,
            	ContainerId: containerId,
            	ContainerDropItems: []
            };

			var formDrop = $(this).parents(".drop_level");
			var containerDropControlItems = formDrop.find("select");
			var hasPassed = false;

			containerDropControlItems.each(function () {
				var row = $(this).parents(".clsline, .clsCoinsline");
				var noteValue = row.find("input[name='textNoteValue']");
				var coinValue = row.find("input[name='textCoinValue']");
				var noteCount = row.find("input[name='textNoteCount']");
				var coinCount = row.find("input[name='textCoinCount']");

				var value = noteValue.length == 0 ? coinValue : noteValue;
				var count = noteCount.length == 0 ? coinCount : noteCount;

				containerDropItems =
                {
                	ContainerDropId: 0,
                	ContainerDropItemId: 0,
                	DenominationType: noteValue.length > 0 ? "Notes" : "Coins",
                	ValueInCents: $(this).val(),
                	Count: isNumber(count.val()) == false ? 0 : count.val(),
                	Value: isNumber(value.val()) == false ? 0 : value.val()
                };


				containerDropObject.ContainerDropItems.push(containerDropItems);

				if (containerDropItems.ValueInCents > 0 && (containerDropItems.Value > 0) || containerDropItems.Count > 0) {
					hasPassed = true;
				}
			});

			if (hasPassed == false) {
				showMessageBox("MessageWindow", "Alert Response", "", "Cant Copy " + dropDescription + " without denominations!");
				return false;
			}


			// ContainerDrop Properties
			var currentContainer = $(this).parents(".bagOrCanister");
			var containerDrops = currentContainer.find(".denomination_groups_parent");
			denomination_groups_clone.clone(true).appendTo(containerDrops);


			var lastDropInContainer = $(this).parents(".bagOrCanister").find(".drop_level").last();

			// Drop serial number
			var oldDropSerialNumber = formDrop.find("input[name='txtDropSerialNumber']").val();
			lastDropInContainer.find("input[name='txtDropSerialNumber']").val(oldDropSerialNumber);

			// Drop Amount
			var oldDropAmount = formDrop.find("input[name='txtDropAmount']").val();
			lastDropInContainer.find("input[name='txtDropAmount']").val(oldDropAmount);

			// Drop Reference
			var oldDropReference = formDrop.find("input[name='txtDropReference']").val();
			lastDropInContainer.find("input[name='txtDropReference']").val(oldDropReference);

			// always get the last appended container drop
			var lastDenominationDrop = currentContainer.find(".denominationgroup").last();

			lastDropInContainer.find("input[name='hdContainerDropId']").val(0);
			lastDropInContainer.find("input[name='hdDropStatusName']").val("ACTIVE");

			lastDenominationDrop.find(".clsnotes .clsline").remove();
			lastDenominationDrop.find(".clscoins .clsCoinsline").remove();

			// denominations
			var notesParent = lastDenominationDrop.find("table[CurrencyType='Notes']");
			var coinsParent = lastDenominationDrop.find("table[CurrencyType='Coins']");

			$.each(containerDropObject.ContainerDropItems, function (c, denomination) {
				var denominationCount = denomination.Count;
				var denominationType = denomination.DenominationType;
				var valueInCents = denomination.ValueInCents;

				if (denominationType == "Notes") {
					row_clone_notes.clone(true).appendTo(notesParent);
					// note values
					var notes = lastDenominationDrop.find(".clsnotes .clsline:last-child");
					var noteCount = notes.find('input[name="textNoteCount"]');
					var noteDeno = notes.find('select[name="dropDownListNote"]');
					var noteValue = notes.find('input[name="textNoteValue"]');
					setCashDepositProcessingElementsValues(noteCount, noteValue, noteDeno, valueInCents, denominationCount, false);
				}

				if (denominationType == "Coins") {
					row_clone_coins.clone(true).appendTo(coinsParent);
					// coin values
					var coins = lastDenominationDrop.find(".clscoins .clsCoinsline:last-child");
					var coinCount = coins.find('input[name="textCoinCount"]');
					var coinDeno = coins.find('select[name="dropDownListCoin"]');
					var coinValue = coins.find('input[name="textCoinValue"]');
					setCashDepositProcessingElementsValues(coinCount, coinValue, coinDeno, valueInCents, denominationCount, false);
				}
			});

			var hasNotesInDrop = notesParent.find("input[name='textNoteCount']");
			if (hasNotesInDrop.length == 0) {
				row_clone_notes.clone(true).appendTo(notesParent);
			}

			var hasCoinsInDrop = coinsParent.find("input[name='textCoinCount']");
			if (hasCoinsInDrop.length == 0) {
				row_clone_coins.clone(true).appendTo(coinsParent);
			}

			notesParent.find("a.remove").first().hide();
			coinsParent.find("a.remove").first().hide();

			// notes subtotals
			var denominationGroupCollectionNotes = lastDenominationDrop.find("table[CurrencyType='Notes'] input[name='textNoteValue']");
			var textSubTotal = lastDenominationDrop.find(".clsNotessubtotal input[name='textNotesSubtotal']");
			getsubTotal(denominationGroupCollectionNotes, textSubTotal);

			// coins subtotals
			var denominationGroupCollectionCoins = lastDenominationDrop.find("table[CurrencyType='Coins'] input[name='textCoinValue']");
			var textCoinSubTotal = lastDenominationDrop.find(".clsCoinssubtotal input[name='textCoinsSubtotal']");
			getsubTotal(denominationGroupCollectionCoins, textCoinSubTotal);


			var lblSerialNumber = lastDropInContainer.find(".lblSerialNumber");
			lblSerialNumber.html(dropDescription + " Serial Number");

			var description = dropDescription == "Drop" ? "Drop Reference" : "Custom Deposit Reference";
			lastDropInContainer.find(".lblDropReference").html(description);

			lastDropInContainer.find(".lblDropAmount").html(dropDescription + " Amount");


			var txtDropSerialNumber = lastDropInContainer.find("input[name='txtDropSerialNumber']");

			// TotalInDrop
			var oldTotalInDrop = formDrop.find(".TotalInDrop").html();
			lastDropInContainer.find(".TotalInDrop").html(oldTotalInDrop);

			if ($('#ddlDepositType option:selected').text() == "Multi Deposit") {
				lblSerialNumber.remove();
				txtDropSerialNumber.remove();
			}

			var dropsOrDeposits = $(this).parents(".bagOrCanister").find(".denomination_groups_clone");
			var counter = 0;

			dropsOrDeposits.each(function () {
				counter++;
				$(this).find("input[name='hdDropNumber']").val(counter);
				$(this).find(".lblDropTitleAndNumber").html(dropDescription + " " + counter);
			});

			enumerateContainers();

			var buttonCopyDrop = $("button[name ='ButtonCopyDrop']");
			buttonCopyDrop.each(function () {
				$(this).html("Copy " + dropDescription);
			});
		});


		function isInitialCitStartCode(s) {

			var citInitialDigit = $.trim($("#hdInitialCitSerialNumber").val());

			if (isEmptyString(s)) {
				if (isInitialCitStartCode.arguments.length == 1) return 0;
				else return (isInitialCitStartCode.arguments[1] == true);
			}
			for (var i = 0; i < s.length; i++) {
				var c = s[i];
				if (!isBetweenZeroAndNine(c)) return false;
			}
			if (s.charAt(0) != citInitialDigit) { return false; }
			return true;
		}


		function isBetweenZeroAndNine(value) {
			return value >= "0" && value <= "9";
		}


		function isEmptyString(value) {
			return value == null || value.length == 0;
		}


		function isSealNumberANumber(s) {
			if (isEmptyString(s)) {
				if (isSealNumberANumber.arguments.length == 1) return 0;
				else return (isSealNumberANumber.arguments[1] == true);
			}
			for (var i = 0; i < s.length; i++) {
				var c = s[i];
				if (!isBetweenZeroAndNine(c)) return false;
			}
			return true;
		}


		function isDropSealNumbersDuplicated() {
			var serialNumbers = [];
			var dropBagSerialNumbers = $("#ContainersHolder").find("input[name='txtDropSerialNumber']");

			dropBagSerialNumbers.each(function () {
				if ($.trim($(this).val()) != "") {
					serialNumbers.push($.trim($(this).val()));
				}
			});

			var count = 0;
			for (var i = 0; i < serialNumbers.length; i++) {

				for (var j = i + 1; j < serialNumbers.length; j++) {
					if (serialNumbers[i] == serialNumbers[j]) {
						count++;
					}
				}
			}
			return count > 0;
		}


		function isNumber(n) {
			return !isNaN(parseFloat(n)) && isFinite(n);
		}






        function submitContainerDropInNewContainerInNewCashDeposit(cashDepositModel, submitButton, formDrop, dropDescription) {
            var parameters = {
                cashDeposit: cashDepositModel,
                dropDescription: dropDescription
            };

            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("SubmitContainerDropInNewContainerInNewCashDeposit")',
                data: JSON.stringify(parameters),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {

	                if (result.ResponseCode == null) {
		                // Close Loading Indicator
		                $("#btnConfirmCancel").click();
		                showMessageBox("MessageWindow", "Error Message", "", result.Message);
	                }
	                else {
	                	$("#hdCashDepositId").val(result.ResponseCode.CashDepositId);
	                	formDrop.parents(".bagOrCanister").find("input[name='hdContainerId']").val(result.ContainerDrop.ContainerId);
	                	formDrop.find("input[name='hdDropStatusName']").val("SUBMITTED");
	                	formDrop.find("input[name='hdContainerDropId']").val(result.ContainerDrop.ContainerDropId);
	                	formDrop.find("input[name='hdStatusId']").val(result.ContainerDrop.StatusId);
	                	formDrop.find("input[name='hdDropReferenceNumber']").val(result.ContainerDrop.ReferenceNumber);
	                	formDrop.find("input[name='hdContainerReferenceNumber']").val(result.BagReferenceNumber);

	                	formDrop.parents(".bagOrCanister").find("#Attribute1").attr('disabled', true);
	                	formDrop.parents(".bagOrCanister").find("#Attribute2").attr('disabled', true);
	                	formDrop.parents(".bagOrCanister").find("#ddlContainerType").attr('disabled', true);

		                submitButton.html("Submitted");
		                submitButton.attr('disabled', true);

		                var inputControls = formDrop.find("input[type='text'], select");
		                inputControls.each(function() {
			                $(this).attr('disabled', true);
		                });

		                formDrop.find(".denomination_groups_clone").css("background-color", "ButtonFace");
		                formDrop.find(".denomination_groups_clone").css("border-color", "orange");

		                manageContainerDropItems(formDrop, result);

		                showMessageBox("MessageWindow", "Cash Deposit", "", result.Message);
		                $("#btnConfirmCancel").click();

		                //applyContainerDropItemsOnSubmitDrop(formDrop, 90);

		                var urlParams = { cashDepositId: result.ResponseCode.CashDepositId };

		                $.ajax(
		                {
			                type: "POST",
			                url: '@Url.Action("SubmitContainerDropInNewContainerInNewCashDepositOnPostReturn")',
                                data: JSON.stringify(urlParams),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function () {
                                	eachDropOrDepositAsPdf(result.ResponseCode.CashDepositId, result.ContainerDrop.ContainerDropId);
                                }
                            });
                    }
                },
                error: function(result) {
                    showMessageBox("MessageWindow", "Error Message", "", result.Message);
                    $("#btnConfirmCancel").click();
                }
            }); // end submit

        }


        function submitNewDropInNewContainer(containerModel, submitButton, formDrop, dropDescription, totalDepositAmount) {
            var parameters = {
                container: containerModel,
                totalDepositAmount: totalDepositAmount,
                dropDescription: dropDescription
            };

            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("SubmitNewDropInNewContainer")',
                data: JSON.stringify(parameters),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {

                    if (result.ResponseCode == null) {
                        // Close Loading Indicator
                        $("#btnConfirmCancel").click();
                        showMessageBox("MessageWindow", "Error Message", "", result.Message);
                    }
                    else {
                    	$("#hdCashDepositId").val(result.Container.CashDepositId);
                    	formDrop.parents(".bagOrCanister").find("input[name='hdContainerId']").val(result.Container.ContainerId);
                    	formDrop.find("input[name='hdDropStatusName']").val("SUBMITTED");
                    	formDrop.find("input[name='hdContainerDropId']").val(result.ContainerDrop.ContainerDropId);
                    	formDrop.find("input[name='hdStatusId']").val(result.ContainerDrop.StatusId);
                    	formDrop.find("input[name='hdDropReferenceNumber']").val(result.ContainerDrop.ReferenceNumber);
                    	formDrop.find("input[name='hdContainerReferenceNumber']").val(result.Container.ReferenceNumber);

                    	formDrop.parents(".bagOrCanister").find("#Attribute1").attr('disabled', true);
                    	formDrop.parents(".bagOrCanister").find("#Attribute2").attr('disabled', true);
                    	formDrop.parents(".bagOrCanister").find("#ddlContainerType").attr('disabled', true);

                        submitButton.html("Submitted");
                        submitButton.attr('disabled', true);

                        var inputControls = formDrop.find("input[type='text'], select");
                        inputControls.each(function() {
                            $(this).attr('disabled', true);
                        });
                        formDrop.find(".denomination_groups_clone").css("background-color", "ButtonFace");
                        formDrop.find(".denomination_groups_clone").css("border-color", "orange");

                        manageContainerDropItems(formDrop, result);

                        showMessageBox("MessageWindow", "Cash Deposit", "", result.Message);
                        $("#btnConfirmCancel").click();

                        	var urlParams = { containerId: result.ResponseCode.ContainerId };

                            $.ajax(
                            {
                                type: "POST",
                                url: '@Url.Action("SubmitNewDropInNewContainerOnPostReturn")',
                                data: JSON.stringify(urlParams),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                success: function () {
                                	eachDropOrDepositAsPdf(result.Container.CashDepositId, result.ContainerDrop.ContainerDropId);
                                }
                            });

                    }
                },
                error: function(result) {
                    showMessageBox("MessageWindow", "Error Message", "", result.Message);
                    $("#btnConfirmCancel").click();
                }
            }); // end submit
        }



        function submitDropOrDeposit(containerDropModel, submitButton, formDrop, dropDescription, containerTotal) {
            var parameters = {
            	containerDrop: containerDropModel,
            	containerAmount: containerTotal,
            	description: dropDescription
            };

            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("SubmitDrop")',
                data: JSON.stringify(parameters),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function(result) {

                    if (result.ResponseCode == null) {
                        // Close Loading Indicator
                        $("#btnConfirmCancel").click();
                        showMessageBox("MessageWindow", "Error Message", "", result.Message);
                    }
                    else {
                        formDrop.parents(".bagOrCanister").find("input[name='hdContainerId']").val(result.ContainerDrop.ContainerId);
                        formDrop.find("input[name='hdDropStatusName']").val("SUBMITTED");
                        formDrop.find("input[name='hdContainerDropId']").val(result.ContainerDrop.ContainerDropId);
                        formDrop.find("input[name='hdStatusId']").val(result.ContainerDrop.StatusId);
                        formDrop.find("input[name='hdDropReferenceNumber']").val(result.ContainerDrop.ReferenceNumber);
                        formDrop.find("input[name='hdContainerReferenceNumber']").val(result.BagReferenceNumber);

                        formDrop.parents(".bagOrCanister").find("#Attribute1").attr('disabled', true);
                        formDrop.parents(".bagOrCanister").find("#Attribute2").attr('disabled', true);
                        formDrop.parents(".bagOrCanister").find("#ddlContainerType").attr('disabled', true);

                        submitButton.html("Submitted");
                        submitButton.attr('disabled', true);

                        var inputControls = formDrop.find("input[type='text'], select");
                        inputControls.each(function() {
                            $(this).attr('disabled', true);
                        });
                        formDrop.find(".denomination_groups_clone").css("background-color", "ButtonFace");
                        formDrop.find(".denomination_groups_clone").css("border-color", "orange");

                        manageContainerDropItems(formDrop, result);

                        showMessageBox("MessageWindow", "Cash Deposit", "", result.Message);
                        $("#btnConfirmCancel").click();

                        var urlParams = { containerDropId: result.ResponseCode.ContainerDropId };

                        $.ajax(
                        {
                            type: "POST",
                            url: '@Url.Action("SubmitDropOnPostReturn")',
                            data: JSON.stringify(urlParams),
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (result2) {
                            	eachDropOrDepositAsPdf($("#hdCashDepositId").val(), result.ResponseCode.ContainerDropId);
                            }
                        });
                    }
                },
                error: function(result) {
                    showMessageBox("MessageWindow", "Error Message", "", result.Message);
                    $("#btnConfirmCancel").click();
                }
            }); // end submit
        }


		function eachDropOrDepositAsPdf(resultCashDepositId, resultContainerDropId) {
			var indexUrl = '@Url.Action("Index")';
			var baseUrl = indexUrl.replace("Index", "");

			var depositSlipUrl = baseUrl + '/EachDropOrDepositAsPdf/?id=' + resultCashDepositId + '&cdid=' + resultContainerDropId;
			window.open(depositSlipUrl, '_blank');
		}

		

		function manageContainerDropItems(formDrop, result) {
			// hdContainerDropItemId
			var denominations = formDrop.find("select");

			denominations.each(function () {
				var row = $(this).parents(".clsline, .clsCoinsline");
				var containerDropItem = row.find("input[name='hdContainerDropItemId']");

				var valueInCents = $(this).val();

				$.each(result.ContainerDrop.ContainerDropItems, function (c, denomination) {

					if (denomination.ValueInCents == valueInCents) {
						containerDropItem.val(denomination.ContainerDropItemId);
					}

				});
			});
		}

	});


</script>