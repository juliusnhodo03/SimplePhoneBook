@using System.Activities.Statements
@using Kendo.Mvc.UI
@model Application.Dto.Account.AccountDto

@{
    ViewBag.Title = "Edit Bank Account";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .label {
        width: 100px !important;
    }

    .required:after {
        content: "*";
        font-weight: bold;
        color: red;
    }
</style>
<div class="well">

    <!--<h2> Add New Cash Centre </h2> -->
    <p>Fields marked with an asterisk <span class="requiredField">*</span> are required</p>

    <div class="ui-widget-header">
        <h4 style="margin-left: 5px">Edit Bank Account</h4>
    </div>

    <div id="content">

        @using (Html.BeginForm())
        {
            @Html.ValidationSummary()
            <div class="ui-widget-content" style="padding: 5px;">

                <div class="row">
                    <div class="span2">
                        @Html.LabelFor(model => model.SiteId, new { @class = "label required", @style = "width:150px !important" })
                    </div>
                    <div class="span2">
                        <div class="span2">
                            @(Html.Kendo().DropDownList()
                                      .Name("SiteId") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                                      .DataTextField("Name") //Specifies which property of the Product to be used by the dropdownlist as a text.
                                      .DataValueField("Id") //Specifies which property of the Product to be used by the dropdownlist as a value.
                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetSites", "BankAccount"); //Set the Action and Controller name
                                          })
                                              .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                                      }).HtmlAttributes(new { @style = "width: 239px; margin-left: -20px", tabindex = "1" })
                            )
                        </div>
                    </div>

                    <div class="span2 offset2">
                        @Html.LabelFor(model => model.CitCode, new { @class = "label required", @style = "width:150px !important" })
                    </div>
                    <div class="span2">
                        @Html.TextBoxFor(model => model.CitCode, new { @disabled = "disabled", @id = "txtCitCode" })
                    </div>
                </div>


                <br />

                <div class="row">
                    <div class="span2">
                        @Html.LabelFor(model => model.BankId, new { @class = "label required", @style = "width:152px !important" })
                    </div>
                    <div class="span2">
                        <div class="span2">
                            @(Html.Kendo().DropDownList()
                                      .Name("BankId") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                                      .DataTextField("Name") //Specifies which property of the Product to be used by the dropdownlist as a text.
                                      .DataValueField("Id") //Specifies which property of the Product to be used by the dropdownlist as a value.
                                      .DataSource(source =>
                                      {
                                          source.Read(read =>
                                          {
                                              read.Action("GetBanksKendo", "BankAccount"); //Set the Action and Controller name
                                          })
                                              .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                                      }).HtmlAttributes(new { @style = "width: 239px; margin-left: -20px", tabindex = "2" })
                            )

                        </div>
                    </div>

                    <div class="span2 offset2">
                        @Html.LabelFor(model => model.BranchCode, new { @class = "label required", @style = "width:150px !important" })
                    </div>
                    <div class="span2">
                        @Html.TextBoxFor(model => model.BranchCode, new { @disabled = "disabled", @id = "txtBranchCode" })
                    </div>


                </div>

                <div class="row">
                    <div class="span2">
                        
                            @Html.LabelFor(model => model.AccountTypeId, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                    <div class="span2">
                        <div class="span2">
                            @* @Html.Kendo().DropDownListFor(a => a.AccountTypeId).BindTo(ViewData["GetAccountTypes"] as SelectList).SelectedIndex(0).HtmlAttributes(new { @style = "width: 238px;", tabindex = "3" })*@
                            @(Html.Kendo().DropDownList()
                              .Name("AccountTypeId") //The name of the dropdownlist is mandatory. It specifies the "id" attribute of the widget.
                              .DataTextField("Name") //Specifies which property of the Product to be used by the dropdownlist as a text.
                              .DataValueField("Id") //Specifies which property of the Product to be used by the dropdownlist as a value.
                              .DataSource(source =>
                              {
                                  source.Read(read =>
                                  {
                                      read.Action("GetAccountTypes", "BankAccount"); //Set the Action and Controller name
                                  })
                                      .ServerFiltering(true); //If true the DataSource will not filter the data on the client.
                              }).HtmlAttributes(new { @style = "width: 239px; margin-left: -20px", tabindex = "1" })
                            )
                        </div>
                    </div>

                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.BeneficiaryCode, new { @class = "label required", @disabled = "disabled", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.BeneficiaryCode, new { @readonly = "readonly" })

                        </div>
                </div>

                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            @Html.LabelFor(model => model.AccountHolderName, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.AccountHolderName, new {@maxlength ="40", tabindex = "4" })
                            @Html.ValidationMessageFor(model => model.AccountHolderName)
                        </div>
                        <div class="span2 offset2">
                            @Html.LabelFor(model => model.AccountNumber, new { @class = "label required", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.TextBoxFor(model => model.AccountNumber, new {@maxlength ="20", tabindex = "5" })
                            @Html.ValidationMessageFor(model => model.AccountNumber)
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            @Html.LabelFor(model => model.DefaultAccount, new { @class = "label", @style = "width:150px !important" })
                        </div>
                        <div class="span2">
                            @Html.CheckBoxFor(model => model.DefaultAccount, new { id="chkDefaultAccount", tabindex = "6", @style = "width:215px !important; margin-left: -85px" })
                        </div>
                        <div class="span2 offset2"></div>
                        <div class="span2"></div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="input-prepend">
                        <div class="span2">
                            @Html.LabelFor(model => model.PreviousComments, new { @class = "add-on ", @style = "width:150px" })
                        </div>
                        <div class=" span9">
                            @Html.TextAreaFor(model => model.PreviousComments, new { @style = "width:101%; height: 100px", tabindex = "22", @readonly = "readonly" })
                        </div>
                    </div>
                </div>

                @Html.HiddenFor(model => model.AccountId)
                @Html.HiddenFor(model => model.SiteId)
                @Html.HiddenFor(model => model.BankId)
                @Html.HiddenFor(model => model.AccountTypeId)
                @Html.HiddenFor(model => model.StatusId)
                @Html.HiddenFor(model => model.BranchCode)
                @Html.HiddenFor(model => model.CitCode)


                <div class="row">
	                <div class="span2 offset6">
						<input type="button" onclick="onPost('hdBtnSave')" value="Save" class="btn btn-primary" style="width: 100px" />
						<input id="hdBtnSave" name="command" type="submit" value="Save" class="btn btn-primary hide" style="width: 100px" />
	                </div>
                    <div class="span2">
                        <span style="width :150px ; margin-right:21px;"></span>
						<input type="button" onclick="onPost('btnSubmit')" value="Submit" class="btn btn-success" style="width: 100px; margin-left: -45px" />
                        <input id="btnSubmit" name="command" type="submit" value="Submit" class="btn btn-success hide" />
                    </div>
                    <div class="span1">
                        <a href='@Url.Action("Index")' id="confirm" class="btn btn-danger" style="width: 70px; margin-left: -45px">Exit</a>
                    </div>
                </div>

            </div>
        }
    </div>

</div>



<script id="ConfirmWindow" type="text/x-kendo-template">
	<div style="margin-left:20px;">
		<img src="@Url.Content("~/Content/Images/question.png")" style="float:left" />
		<br />
		<p style="margin-left:5px;" class="confirmation-message"></p>
	</div>

	<div style="margin-left:160px; margin-top:5px;">
		<button id="btnConfirmCancel" class="confirm-cancel k-button" style="width:80px">Yes</button>
		<button id="btnNoCancel" class="no-cancel k-button" style="width:80px">No</button>
	</div>
</script>

<script type="text/javascript">

	$("#confirm").easyconfirm({ locale: { title: 'Confirm', button: ['No', 'Yes'], text: 'Site Settlement Account record is not yet Saved. Do you want to continue?' } });

	function Error() {
		$('#trloading').hide();
	}
</script>

<script type="text/javascript">
	
	// Bank dropdown change
	$("#BankId").change(function () {

		var parameters = { BankId: $(this).val() };

		var url = '@Url.Action("GetBankCode")/?bankId=' + parameters.BankId;
		$.post(url, function (data) {
			// Merchant Contract Number
			$("#txtBranchCode").attr('value', data.BranchCode);
		});
	});


	// Site dropdown change
	$("#SiteId").change(function () {
		var parameters = { SiteId: $(this).val() };

		var url = '@Url.Action("GetCitCode")/?siteId=' + parameters.SiteId;
		$.post(url, function (data) {
			// Site Cit Code
			$("#txtCitCode").attr('value', data.CitCode);
		});
	});

	function onPost(buttonName) {
		var isDefault = $("#chkDefaultAccount").is(":checked");

		if (isDefault != isDefaultAccountChecked) {

			var kendoWindow = $("<div />").kendoWindow({
				title: "Edit Bank Account",
				resizable: false,
				modal: true,
				width: 430,
				height: 160
			});

			kendoWindow.data("kendoWindow")
				.content($("#ConfirmWindow").html())
				.center().open();

			$(".confirmation-message").html("The Default Account has been changed do you want to proceed?");
            
			kendoWindow
				.find(".no-cancel,.confirm-cancel")
				.click(function () {
					if ($(this).hasClass("confirm-cancel")) {
						$("#" + buttonName).click();
					}
					else {
						window.location.href = '@Url.Action("Index")';
					}

					kendoWindow.data("kendoWindow").close();
				})
				.end();
		}
		else {
			$("#" + buttonName).click();
		}
	}


	var isDefaultAccountChecked = false;

	$(document).ready(function () {

	    isDefaultAccountChecked = '@ViewBag.IsDefaultAccount'.toLowerCase() == "true" ? true : false;
        
	});
</script>


